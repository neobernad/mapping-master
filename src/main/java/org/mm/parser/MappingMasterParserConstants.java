/* Generated By:JJTree&JavaCC: Do not edit this line. MappingMasterParserConstants.java */
package org.mm.parser;


/**
 * Token literal values and constants.
 * Generated by org.javacc.parser.OtherFilesGen#start()
 */
public interface MappingMasterParserConstants {

  /** End of File. */
  int EOF = 0;
  /** RegularExpression Id. */
  int SINGLE_LINE_COMMENT = 9;
  /** RegularExpression Id. */
  int FORMAL_COMMENT = 10;
  /** RegularExpression Id. */
  int MULTI_LINE_COMMENT = 11;
  /** RegularExpression Id. */
  int CLASS = 13;
  /** RegularExpression Id. */
  int INDIVIDUAL = 14;
  /** RegularExpression Id. */
  int EQUIVALENT_TO = 15;
  /** RegularExpression Id. */
  int SUBCLASS_OF = 16;
  /** RegularExpression Id. */
  int FACTS = 17;
  /** RegularExpression Id. */
  int TYPES = 18;
  /** RegularExpression Id. */
  int ANNOTATIONS = 19;
  /** RegularExpression Id. */
  int SAME_AS = 20;
  /** RegularExpression Id. */
  int DIFFERENT_FROM = 21;
  /** RegularExpression Id. */
  int SOME = 22;
  /** RegularExpression Id. */
  int ONLY = 23;
  /** RegularExpression Id. */
  int VALUE = 24;
  /** RegularExpression Id. */
  int MIN = 25;
  /** RegularExpression Id. */
  int MAX = 26;
  /** RegularExpression Id. */
  int EXACTLY = 27;
  /** RegularExpression Id. */
  int AND = 28;
  /** RegularExpression Id. */
  int OR = 29;
  /** RegularExpression Id. */
  int NOT = 30;
  /** RegularExpression Id. */
  int TRUE = 31;
  /** RegularExpression Id. */
  int FALSE = 32;
  /** RegularExpression Id. */
  int XSD_STRING = 33;
  /** RegularExpression Id. */
  int XSD_DECIMAL = 34;
  /** RegularExpression Id. */
  int XSD_BYTE = 35;
  /** RegularExpression Id. */
  int XSD_SHORT = 36;
  /** RegularExpression Id. */
  int XSD_INTEGER = 37;
  /** RegularExpression Id. */
  int XSD_LONG = 38;
  /** RegularExpression Id. */
  int XSD_FLOAT = 39;
  /** RegularExpression Id. */
  int XSD_DOUBLE = 40;
  /** RegularExpression Id. */
  int XSD_BOOLEAN = 41;
  /** RegularExpression Id. */
  int XSD_DATETIME = 42;
  /** RegularExpression Id. */
  int XSD_TIME = 43;
  /** RegularExpression Id. */
  int XSD_DURATION = 44;
  /** RegularExpression Id. */
  int XSD_DATE = 45;
  /** RegularExpression Id. */
  int RDF_XMLLITERAL = 46;
  /** RegularExpression Id. */
  int RDF_PLAINLITERAL = 47;
  /** RegularExpression Id. */
  int RDF_ID = 48;
  /** RegularExpression Id. */
  int XML_LANG = 49;
  /** RegularExpression Id. */
  int MM_DEFAULT_IRI_ENCODING = 50;
  /** RegularExpression Id. */
  int MM_DEFAULT_SHIFT_DIRECTION = 51;
  /** RegularExpression Id. */
  int MM_DEFAULT_REFERENCE_TYPE = 52;
  /** RegularExpression Id. */
  int MM_DEFAULT_VALUE_TYPE = 53;
  /** RegularExpression Id. */
  int MM_DEFAULT_PROPERTY_TYPE = 54;
  /** RegularExpression Id. */
  int MM_DEFAULT_VALUE_DATATYPE = 55;
  /** RegularExpression Id. */
  int MM_DEFAULT_ORDER_IF_CELL_EMPTY = 56;
  /** RegularExpression Id. */
  int MM_DEFAULT_ORDER_IF_ENTITY_ABSENT = 57;
  /** RegularExpression Id. */
  int MM_PREFIX = 58;
  /** RegularExpression Id. */
  int MM_NAMESPACE = 59;
  /** RegularExpression Id. */
  int MM_IRI_ENCODING = 60;
  /** RegularExpression Id. */
  int MM_UNTYPED = 61;
  /** RegularExpression Id. */
  int MM_NULL = 62;
  /** RegularExpression Id. */
  int CELL_WILDCARD = 63;
  /** RegularExpression Id. */
  int OWL_CLASS = 64;
  /** RegularExpression Id. */
  int OWL_NAMED_INDIVIDUAL = 65;
  /** RegularExpression Id. */
  int OWL_OBJECT_PROPERTY = 66;
  /** RegularExpression Id. */
  int OWL_DATA_PROPERTY = 67;
  /** RegularExpression Id. */
  int OWL_ANNOTATION_PROPERTY = 68;
  /** RegularExpression Id. */
  int OWL_IRI = 69;
  /** RegularExpression Id. */
  int OWL_LITERAL = 70;
  /** RegularExpression Id. */
  int OWL_DATATYPE = 71;
  /** RegularExpression Id. */
  int IRI = 72;
  /** RegularExpression Id. */
  int TERM = 73;
  /** RegularExpression Id. */
  int MM_TO_UPPER_CASE = 74;
  /** RegularExpression Id. */
  int MM_TO_LOWER_CASE = 75;
  /** RegularExpression Id. */
  int MM_TRIM = 76;
  /** RegularExpression Id. */
  int MM_PRINTF = 77;
  /** RegularExpression Id. */
  int MM_DECIMAL_FORMAT = 78;
  /** RegularExpression Id. */
  int MM_CAPTURING = 79;
  /** RegularExpression Id. */
  int MM_REVERSE = 80;
  /** RegularExpression Id. */
  int MM_REPLACE = 81;
  /** RegularExpression Id. */
  int MM_REPLACE_ALL = 82;
  /** RegularExpression Id. */
  int MM_REPLACE_FIRST = 83;
  /** RegularExpression Id. */
  int MM_APPEND = 84;
  /** RegularExpression Id. */
  int MM_PREPEND = 85;
  /** RegularExpression Id. */
  int MM_NO_ENCODE = 86;
  /** RegularExpression Id. */
  int MM_CAMELCASE_ENCODE = 87;
  /** RegularExpression Id. */
  int MM_SNAKECASE_ENCODE = 88;
  /** RegularExpression Id. */
  int MM_UUID_ENCODE = 89;
  /** RegularExpression Id. */
  int MM_HASH_ENCODE = 90;
  /** RegularExpression Id. */
  int MM_DEFAULT_LITERAL = 91;
  /** RegularExpression Id. */
  int MM_DEFAULT_LABEL = 92;
  /** RegularExpression Id. */
  int MM_DEFAULT_PREFIX = 93;
  /** RegularExpression Id. */
  int MM_DEFAULT_NAMESPACE = 94;
  /** RegularExpression Id. */
  int MM_DEFAULT_LANGUAGE = 95;
  /** RegularExpression Id. */
  int MM_NO_SHIFT = 96;
  /** RegularExpression Id. */
  int MM_SHIFT_UP = 97;
  /** RegularExpression Id. */
  int MM_SHIFT_DOWN = 98;
  /** RegularExpression Id. */
  int MM_SHIFT_LEFT = 99;
  /** RegularExpression Id. */
  int MM_SHIFT_RIGHT = 100;
  /** RegularExpression Id. */
  int MM_CREATE_IF_CELL_EMPTY = 101;
  /** RegularExpression Id. */
  int MM_IGNORE_IF_CELL_EMPTY = 102;
  /** RegularExpression Id. */
  int MM_WARNING_IF_CELL_EMPTY = 103;
  /** RegularExpression Id. */
  int MM_ERROR_IF_CELL_EMPTY = 104;
  /** RegularExpression Id. */
  int MM_CREATE_IF_ENTITY_ABSENT = 105;
  /** RegularExpression Id. */
  int MM_IGNORE_IF_ENTITY_ABSENT = 106;
  /** RegularExpression Id. */
  int MM_WARNING_IF_ENTITY_ABSENT = 107;
  /** RegularExpression Id. */
  int MM_ERROR_IF_ENTITY_ABSENT = 108;
  /** RegularExpression Id. */
  int CREATE = 109;
  /** RegularExpression Id. */
  int IGNORE = 110;
  /** RegularExpression Id. */
  int WARNING = 111;
  /** RegularExpression Id. */
  int ERROR = 112;
  /** RegularExpression Id. */
  int IRI_REF = 113;
  /** RegularExpression Id. */
  int STRING_LITERAL = 114;
  /** RegularExpression Id. */
  int INTEGER_LITERAL = 115;
  /** RegularExpression Id. */
  int LONG_LITERAL = 116;
  /** RegularExpression Id. */
  int FLOAT_LITERAL = 117;
  /** RegularExpression Id. */
  int QUOTED_NAME = 118;
  /** RegularExpression Id. */
  int LETTER = 119;
  /** RegularExpression Id. */
  int DIGIT = 120;
  /** RegularExpression Id. */
  int EXPONENT = 121;
  /** RegularExpression Id. */
  int CELL_REFERENCE = 122;
  /** RegularExpression Id. */
  int NAME = 123;

  /** Lexical state. */
  int DEFAULT = 0;
  /** Lexical state. */
  int IN_SINGLE_LINE_COMMENT = 1;
  /** Lexical state. */
  int IN_FORMAL_COMMENT = 2;
  /** Lexical state. */
  int IN_MULTI_LINE_COMMENT = 3;

  /** Literal token values. */
  String[] tokenImage = {
    "<EOF>",
    "\" \"",
    "\"\\t\"",
    "\"\\n\"",
    "\"\\r\"",
    "\"\\f\"",
    "\"//\"",
    "<token of kind 7>",
    "\"/*\"",
    "<SINGLE_LINE_COMMENT>",
    "\"*/\"",
    "\"*/\"",
    "<token of kind 12>",
    "<CLASS>",
    "<INDIVIDUAL>",
    "<EQUIVALENT_TO>",
    "<SUBCLASS_OF>",
    "<FACTS>",
    "<TYPES>",
    "<ANNOTATIONS>",
    "<SAME_AS>",
    "<DIFFERENT_FROM>",
    "<SOME>",
    "<ONLY>",
    "<VALUE>",
    "<MIN>",
    "<MAX>",
    "<EXACTLY>",
    "<AND>",
    "<OR>",
    "<NOT>",
    "<TRUE>",
    "<FALSE>",
    "\"xsd:string\"",
    "\"xsd:decimal\"",
    "\"xsd:byte\"",
    "\"xsd:short\"",
    "\"xsd:integer\"",
    "\"xsd:long\"",
    "\"xsd:float\"",
    "\"xsd:double\"",
    "\"xsd:boolean\"",
    "\"xsd:dateTime\"",
    "\"xsd:time\"",
    "\"xsd:duration\"",
    "\"xsd:date\"",
    "\"rdf:XMLLiteral\"",
    "\"rdf:PlainLiteral\"",
    "\"rdf:ID\"",
    "\"xml:lang\"",
    "\"mm:DefaultIRIEncoding\"",
    "\"mm:DefaultShiftDirection\"",
    "\"mm:DefaultReferenceType\"",
    "\"mm:DefaultValueType\"",
    "\"mm:DefaultPropertyType\"",
    "\"mm:DefaultValueDatatype\"",
    "\"mm:DefaultOrderIfCellEmpty\"",
    "\"mm:DefaultOrderIfEntityAbsent\"",
    "\"mm:Prefix\"",
    "\"mm:Namespace\"",
    "\"mm:IRIEncoding\"",
    "\"mm:Untyped\"",
    "\"mm:Null\"",
    "\"*\"",
    "\"Class\"",
    "\"Individual\"",
    "\"ObjectProperty\"",
    "\"DataProperty\"",
    "\"AnnotationProperty\"",
    "\"IRI\"",
    "\"Literal\"",
    "\"Datatype\"",
    "\"mm:entityIRI\"",
    "\"mm:entityTerm\"",
    "\"mm:toUpperCase\"",
    "\"mm:toLowerCase\"",
    "\"mm:trim\"",
    "\"mm:printf\"",
    "\"mm:decimalFormat\"",
    "\"mm:capturing\"",
    "\"mm:reverse\"",
    "\"mm:replace\"",
    "\"mm:replaceAll\"",
    "\"mm:replaceFirst\"",
    "\"mm:append\"",
    "\"mm:prepend\"",
    "\"mm:noEncode\"",
    "\"mm:camelCaseEncode\"",
    "\"mm:snakeCaseEncode\"",
    "\"mm:uuidEncode\"",
    "\"mm:hashEncode\"",
    "\"mm:DefaultLiteral\"",
    "\"mm:DefaultLabel\"",
    "\"mm:DefaultPrefix\"",
    "\"mm:DefaultNamespace\"",
    "\"mm:DefaultLanguage\"",
    "\"mm:NoShift\"",
    "\"mm:shiftUp\"",
    "\"mm:shiftDown\"",
    "\"mm:shiftLeft\"",
    "\"mm:shiftRight\"",
    "\"mm:createIfCellEmpty\"",
    "\"mm:ignoreIfCellEmpty\"",
    "\"mm:warningIfCellEmpty\"",
    "\"mm:errorIfCellEmpty\"",
    "\"mm:createIfEntityAbsent\"",
    "\"mm:ignoreIfEntityAbsent\"",
    "\"mm:warningIfEntityAbsent\"",
    "\"mm:errorIfEntityAbsent\"",
    "\"CREATE\"",
    "\"IGNORE\"",
    "\"WARNING\"",
    "\"ERROR\"",
    "<IRI_REF>",
    "<STRING_LITERAL>",
    "<INTEGER_LITERAL>",
    "<LONG_LITERAL>",
    "<FLOAT_LITERAL>",
    "<QUOTED_NAME>",
    "<LETTER>",
    "<DIGIT>",
    "<EXPONENT>",
    "<CELL_REFERENCE>",
    "<NAME>",
    "\"=\"",
    "\",\"",
    "\"(\"",
    "\")\"",
    "\"{\"",
    "\"}\"",
    "\":\"",
    "\"@\"",
    "\"!\"",
    "\"[\"",
    "\"]\"",
  };

}
