/* MappingMasterParser.java */
/* Generated By:JJTree&JavaCC: Do not edit this line. MappingMasterParser.java */
package org.mm.parser;
import org.mm.parser.node.*;


import static com.google.common.base.Preconditions.checkNotNull;
import javax.annotation.Nonnull;

import org.mm.renderer.internal.ReferenceNotation;

import org.mm.directive.ReferenceDirectives;
import org.mm.directive.DefaultDirectives;

import java.util.*;

public class MappingMasterParser/*@bgen(jjtree)*/implements MappingMasterParserTreeConstants, MappingMasterParserConstants {/*@bgen(jjtree)*/
  protected JJTMappingMasterParserState jjtree = new JJTMappingMasterParserState();
  private ReferenceDirectives systemDirectives;
  private ReferenceDirectives localDirectives;
  private ReferenceDirectives userDirectives;

  public MappingMasterParser(@Nonnull java.io.InputStream inputStream, int unused) {
    this(inputStream, new DefaultDirectives(), unused);
  }

  public MappingMasterParser(@Nonnull java.io.InputStream inputStream, @Nonnull ReferenceDirectives systemDirectives, int unused) {
    this(checkNotNull(inputStream));
    this.systemDirectives = checkNotNull(systemDirectives);
    this.localDirectives = new ReferenceDirectives(systemDirectives);
  }

  public SimpleNode getTransformationRuleNode() throws ParseException {
    return transformation_rule();
  }

//------------------------------------------------------------------------------------------
// MM Transformation Rule
//------------------------------------------------------------------------------------------
  final public 
SimpleNode transformation_rule() throws ParseException {/*@bgen(jjtree) TransformationRule */
  ASTTransformationRule jjtn000 = new ASTTransformationRule(JJTTRANSFORMATIONRULE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case MM_DEFAULT_IRI_ENCODING:
      case MM_DEFAULT_REFERENCE_TYPE:
      case MM_DEFAULT_PROPERTY_TYPE:
      case MM_DEFAULT_VALUE_DATATYPE:
      case MM_DEFAULT_ORDER_IF_CELL_EMPTY:
      case MM_DEFAULT_ORDER_IF_ENTITY_ABSENT:
      case MM_DEFAULT_LITERAL:
      case MM_DEFAULT_LABEL:
      case MM_DEFAULT_PREFIX:
      case MM_DEFAULT_NAMESPACE:
      case MM_DEFAULT_LANGUAGE:{
        rule_directive();
        break;
        }
      case CLASS:
      case INDIVIDUAL:{
        rule_expression();
        break;
        }
      default:
        jj_la1[0] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      jj_consume_token(0);
jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
{if ("" != null) return jjtn000;}
    } catch (Throwable jjte000) {
if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
    throw new Error("Missing return statement in function");
}

//------------------------------------------------------------------------------------------
// MM Rule Directives
//------------------------------------------------------------------------------------------
  final public 
void rule_directive() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case MM_DEFAULT_PREFIX:{
      mm_default_prefix_directive();
      break;
      }
    case MM_DEFAULT_NAMESPACE:{
      mm_default_namespace_directive();
      break;
      }
    case MM_DEFAULT_LANGUAGE:{
      mm_default_language_directive();
      break;
      }
    case MM_DEFAULT_REFERENCE_TYPE:{
      mm_default_reference_type_directive();
      break;
      }
    case MM_DEFAULT_PROPERTY_TYPE:{
      mm_default_property_type_directive();
      break;
      }
    case MM_DEFAULT_VALUE_DATATYPE:{
      mm_default_value_datatype_directive();
      break;
      }
    case MM_DEFAULT_IRI_ENCODING:{
      mm_default_iri_encoding_directive();
      break;
      }
    case MM_DEFAULT_LABEL:{
      mm_default_label_value_directive();
      break;
      }
    case MM_DEFAULT_LITERAL:{
      mm_default_literal_value_directive();
      break;
      }
    case MM_DEFAULT_ORDER_IF_CELL_EMPTY:{
      mm_default_order_if_cell_empty_directive();
      break;
      }
    case MM_DEFAULT_ORDER_IF_ENTITY_ABSENT:{
      mm_default_order_if_entity_absent_directive();
      break;
      }
    default:
      jj_la1[1] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
}

  final public void mm_default_prefix_directive() throws ParseException {String defaultPrefix;
    jj_consume_token(MM_DEFAULT_PREFIX);
    jj_consume_token(120);
    defaultPrefix = string_value();
localDirectives = localDirectives.setPrefix(defaultPrefix);
}

  final public void mm_default_namespace_directive() throws ParseException {String defaultNamespace;
    jj_consume_token(MM_DEFAULT_NAMESPACE);
    jj_consume_token(120);
    defaultNamespace = string_value();
localDirectives = localDirectives.setNamespace(defaultNamespace);
}

  final public void mm_default_language_directive() throws ParseException {String defaultLanguage;
    jj_consume_token(MM_DEFAULT_LANGUAGE);
    jj_consume_token(120);
    defaultLanguage = string_value();
localDirectives = localDirectives.setLanguage(defaultLanguage);
}

  final public void mm_default_reference_type_directive() throws ParseException {int defaultEntityType;
    jj_consume_token(MM_DEFAULT_REFERENCE_TYPE);
    jj_consume_token(120);
    defaultEntityType = reference_type();
localDirectives = localDirectives.setEntityType(defaultEntityType);
}

  final public void mm_default_property_type_directive() throws ParseException {int defaultPropertyType;
    jj_consume_token(MM_DEFAULT_PROPERTY_TYPE);
    jj_consume_token(120);
    defaultPropertyType = property_type();
localDirectives = localDirectives.setPropertyType(defaultPropertyType);
}

  final public void mm_default_value_datatype_directive() throws ParseException {int defaultValueDatatype;
    jj_consume_token(MM_DEFAULT_VALUE_DATATYPE);
    jj_consume_token(120);
    defaultValueDatatype = datatype();
localDirectives = localDirectives.setValueDatatype(defaultValueDatatype);
}

  final public void mm_default_iri_encoding_directive() throws ParseException {int defaultIriEncoding;
    jj_consume_token(MM_DEFAULT_IRI_ENCODING);
    jj_consume_token(120);
    defaultIriEncoding = iri_encoding();
localDirectives = localDirectives.setIriEncoding(defaultIriEncoding);
}

  final public void mm_default_shift_direction_directive() throws ParseException {int defaultShiftDirection;
    jj_consume_token(MM_DEFAULT_SHIFT_DIRECTION);
    jj_consume_token(120);
    defaultShiftDirection = shift_direction();
localDirectives = localDirectives.setShiftDirection(defaultShiftDirection);
}

  final public void mm_default_label_value_directive() throws ParseException {String defaultLabelValue;
    jj_consume_token(MM_DEFAULT_LABEL);
    jj_consume_token(120);
    defaultLabelValue = string_value();
localDirectives = localDirectives.setLabelValue(defaultLabelValue);
}

  final public void mm_default_literal_value_directive() throws ParseException {String defaultLiteralValue;
    jj_consume_token(MM_DEFAULT_LITERAL);
    jj_consume_token(120);
    defaultLiteralValue = string_value();
localDirectives = localDirectives.setLiteralValue(defaultLiteralValue);
}

  final public void mm_default_order_if_cell_empty_directive() throws ParseException {int defaultOrderIfCellEmpty;
    jj_consume_token(MM_DEFAULT_ORDER_IF_CELL_EMPTY);
    jj_consume_token(120);
    defaultOrderIfCellEmpty = order_type();
localDirectives = localDirectives.setOrderIfCellEmpty(defaultOrderIfCellEmpty);
}

  final public void mm_default_order_if_entity_absent_directive() throws ParseException {int defaultOrderIfEntityAbsent;
    jj_consume_token(MM_DEFAULT_ORDER_IF_ENTITY_ABSENT);
    jj_consume_token(120);
    defaultOrderIfEntityAbsent = order_type();
localDirectives = localDirectives.setOrderIfEntityAbsent(defaultOrderIfEntityAbsent);
}

//------------------------------------------------------------------------------------------
// MM Rule Expression
//------------------------------------------------------------------------------------------
  final public 
void rule_expression() throws ParseException {/*@bgen(jjtree) RuleExpression */
  ASTRuleExpression jjtn000 = new ASTRuleExpression(JJTRULEEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case CLASS:{
        class_frame();
        break;
        }
      case INDIVIDUAL:{
        individual_frame();
        break;
        }
      default:
        jj_la1[2] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
}

//------------------------------------------------------------------------------------------
// MM Class Frame
//------------------------------------------------------------------------------------------
  final public 
void class_frame() throws ParseException {/*@bgen(jjtree) ClassFrame */
  ASTClassFrame jjtn000 = new ASTClassFrame(JJTCLASSFRAME);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      class_declaration();
      label_1:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case EQUIVALENT_TO:
        case SUBCLASS_OF:
        case ANNOTATIONS:{
          ;
          break;
          }
        default:
          jj_la1[3] = jj_gen;
          break label_1;
        }
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case SUBCLASS_OF:{
          subclass_of();
          break;
          }
        case EQUIVALENT_TO:{
          equivalent_classes();
          break;
          }
        case ANNOTATIONS:{
          annotation_assertion();
          break;
          }
        default:
          jj_la1[4] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
}

  final public void class_declaration() throws ParseException {/*@bgen(jjtree) ClassDeclaration */
  ASTClassDeclaration jjtn000 = new ASTClassDeclaration(JJTCLASSDECLARATION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(CLASS);
      atomic_class();
    } catch (Throwable jjte000) {
if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
}

  final public void subclass_of() throws ParseException {/*@bgen(jjtree) SubclassOf */
  ASTSubclassOf jjtn000 = new ASTSubclassOf(JJTSUBCLASSOF);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(SUBCLASS_OF);
      class_expression();
      label_2:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case 121:{
          ;
          break;
          }
        default:
          jj_la1[5] = jj_gen;
          break label_2;
        }
        jj_consume_token(121);
        class_expression();
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
}

  final public void equivalent_classes() throws ParseException {/*@bgen(jjtree) EquivalentClasses */
  ASTEquivalentClasses jjtn000 = new ASTEquivalentClasses(JJTEQUIVALENTCLASSES);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(EQUIVALENT_TO);
      class_expression();
      label_3:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case 121:{
          ;
          break;
          }
        default:
          jj_la1[6] = jj_gen;
          break label_3;
        }
        jj_consume_token(121);
        class_expression();
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
}

  final public void annotation_assertion() throws ParseException {/*@bgen(jjtree) AnnotationAssertion */
  ASTAnnotationAssertion jjtn000 = new ASTAnnotationAssertion(JJTANNOTATIONASSERTION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(ANNOTATIONS);
      annotation();
      label_4:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case 121:{
          ;
          break;
          }
        default:
          jj_la1[7] = jj_gen;
          break label_4;
        }
        jj_consume_token(121);
        annotation();
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
}

  final public void annotation() throws ParseException {/*@bgen(jjtree) Annotation */
  ASTAnnotation jjtn000 = new ASTAnnotation(JJTANNOTATION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      annotation_property();
      annotation_value();
    } catch (Throwable jjte000) {
if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
}

  final public void annotation_value() throws ParseException {/*@bgen(jjtree) AnnotationValue */
  ASTAnnotationValue jjtn000 = new ASTAnnotationValue(JJTANNOTATIONVALUE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case IRI_REF:{
        iri(OWL_IRI);
        break;
        }
      case TRUE:
      case FALSE:
      case STRING_LITERAL:
      case INTEGER_LITERAL:
      case FLOAT_LITERAL:{
        literal();
        break;
        }
      case 127:{
        reference(MM_UNTYPED);
        break;
        }
      default:
        jj_la1[8] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
}

//------------------------------------------------------------------------------------------
// MM Individual Frame
//------------------------------------------------------------------------------------------
  final public 
void individual_frame() throws ParseException {/*@bgen(jjtree) IndividualFrame */
  ASTIndividualFrame jjtn000 = new ASTIndividualFrame(JJTINDIVIDUALFRAME);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      individual_declaration();
      label_5:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case FACTS:
        case TYPES:
        case ANNOTATIONS:
        case SAME_AS:
        case DIFFERENT_FROM:{
          ;
          break;
          }
        default:
          jj_la1[9] = jj_gen;
          break label_5;
        }
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case TYPES:{
          class_assertion();
          break;
          }
        case FACTS:{
          property_assertion();
          break;
          }
        case ANNOTATIONS:{
          annotation_assertion();
          break;
          }
        case SAME_AS:{
          same_as();
          break;
          }
        case DIFFERENT_FROM:{
          different_from();
          break;
          }
        default:
          jj_la1[10] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
}

  final public void individual_declaration() throws ParseException {/*@bgen(jjtree) IndividualDeclaration */
  ASTIndividualDeclaration jjtn000 = new ASTIndividualDeclaration(JJTINDIVIDUALDECLARATION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(INDIVIDUAL);
      named_individual();
    } catch (Throwable jjte000) {
if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
}

  final public void class_assertion() throws ParseException {/*@bgen(jjtree) ClassAssertion */
  ASTClassAssertion jjtn000 = new ASTClassAssertion(JJTCLASSASSERTION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(TYPES);
      class_expression();
      label_6:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case 121:{
          ;
          break;
          }
        default:
          jj_la1[11] = jj_gen;
          break label_6;
        }
        jj_consume_token(121);
        class_expression();
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
}

  final public void property_assertion() throws ParseException {/*@bgen(jjtree) PropertyAssertion */
  ASTPropertyAssertion jjtn000 = new ASTPropertyAssertion(JJTPROPERTYASSERTION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(FACTS);
      fact();
      label_7:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case 121:{
          ;
          break;
          }
        default:
          jj_la1[12] = jj_gen;
          break label_7;
        }
        jj_consume_token(121);
        fact();
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
}

  final public void fact() throws ParseException {/*@bgen(jjtree) Fact */
  ASTFact jjtn000 = new ASTFact(JJTFACT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      property();
      property_value();
    } catch (Throwable jjte000) {
if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
}

  final public void property_value() throws ParseException {/*@bgen(jjtree) PropertyValue */
  ASTPropertyValue jjtn000 = new ASTPropertyValue(JJTPROPERTYVALUE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case IRI_REF:{
        iri(OWL_IRI);
        break;
        }
      case TRUE:
      case FALSE:
      case STRING_LITERAL:
      case INTEGER_LITERAL:
      case FLOAT_LITERAL:{
        literal();
        break;
        }
      case 127:{
        reference(MM_UNTYPED);
        break;
        }
      default:
        jj_la1[13] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
}

  final public void same_as() throws ParseException {/*@bgen(jjtree) SameAs */
  ASTSameAs jjtn000 = new ASTSameAs(JJTSAMEAS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(SAME_AS);
      named_individual();
      label_8:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case 121:{
          ;
          break;
          }
        default:
          jj_la1[14] = jj_gen;
          break label_8;
        }
        jj_consume_token(121);
        named_individual();
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
}

  final public void different_from() throws ParseException {/*@bgen(jjtree) DifferentFrom */
  ASTDifferentFrom jjtn000 = new ASTDifferentFrom(JJTDIFFERENTFROM);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(DIFFERENT_FROM);
      named_individual();
      label_9:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case 121:{
          ;
          break;
          }
        default:
          jj_la1[15] = jj_gen;
          break label_9;
        }
        jj_consume_token(121);
        named_individual();
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
}

//------------------------------------------------------------------------------------------
// OWL Class Expression
//------------------------------------------------------------------------------------------
  final public 
void class_expression() throws ParseException {/*@bgen(jjtree) ClassExpressionCategory */
  ASTClassExpressionCategory jjtn000 = new ASTClassExpressionCategory(JJTCLASSEXPRESSIONCATEGORY);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      if (jj_2_1(4)) {
        restriction();
      } else {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case TRUE:
        case FALSE:
        case IRI_REF:
        case STRING_LITERAL:
        case INTEGER_LITERAL:
        case FLOAT_LITERAL:
        case NAME:
        case 127:{
          atomic_class();
          break;
          }
        case 122:{
          jj_consume_token(122);
          boolean_class_expression();
          jj_consume_token(123);
          break;
          }
        case 124:{
          object_one_of();
          break;
          }
        default:
          jj_la1[16] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
}

  final public void atomic_class() throws ParseException {/*@bgen(jjtree) Class */
  ASTClass jjtn000 = new ASTClass(JJTCLASS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case TRUE:
      case FALSE:
      case IRI_REF:
      case STRING_LITERAL:
      case INTEGER_LITERAL:
      case FLOAT_LITERAL:
      case NAME:{
        value(OWL_CLASS);
        break;
        }
      case 127:{
        reference(OWL_CLASS);
        break;
        }
      default:
        jj_la1[17] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
}

  final public void boolean_class_expression() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case TRUE:
    case FALSE:
    case IRI_REF:
    case STRING_LITERAL:
    case INTEGER_LITERAL:
    case FLOAT_LITERAL:
    case NAME:
    case 122:
    case 124:
    case 127:{
      object_union_of();
      break;
      }
    case NOT:{
      object_complement_of();
      break;
      }
    default:
      jj_la1[18] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
}

  final public void object_union_of() throws ParseException {/*@bgen(jjtree) ObjectUnion */
  ASTObjectUnion jjtn000 = new ASTObjectUnion(JJTOBJECTUNION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      object_intersection_of();
      label_10:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case OR:{
          ;
          break;
          }
        default:
          jj_la1[19] = jj_gen;
          break label_10;
        }
        jj_consume_token(OR);
        object_intersection_of();
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
}

  final public void object_intersection_of() throws ParseException {/*@bgen(jjtree) ObjectIntersection */
  ASTObjectIntersection jjtn000 = new ASTObjectIntersection(JJTOBJECTINTERSECTION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      class_expression();
      label_11:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case AND:{
          ;
          break;
          }
        default:
          jj_la1[20] = jj_gen;
          break label_11;
        }
        jj_consume_token(AND);
        class_expression();
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
}

  final public void object_complement_of() throws ParseException {/*@bgen(jjtree) ObjectComplement */
  ASTObjectComplement jjtn000 = new ASTObjectComplement(JJTOBJECTCOMPLEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(NOT);
      class_expression();
    } catch (Throwable jjte000) {
if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
}

  final public void object_one_of() throws ParseException {/*@bgen(jjtree) ObjectOneOf */
  ASTObjectOneOf jjtn000 = new ASTObjectOneOf(JJTOBJECTONEOF);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(124);
      named_individual();
      label_12:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case 121:{
          ;
          break;
          }
        default:
          jj_la1[21] = jj_gen;
          break label_12;
        }
        jj_consume_token(121);
        named_individual();
      }
      jj_consume_token(125);
    } catch (Throwable jjte000) {
if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
}

//------------------------------------------------------------------------------------------
// OWL Restriction
//------------------------------------------------------------------------------------------
  final public 
void restriction() throws ParseException {
    if (jj_2_2(4)) {
      exact_cardinality();
    } else if (jj_2_3(4)) {
      max_cardinality();
    } else if (jj_2_4(4)) {
      min_cardinality();
    } else if (jj_2_5(4)) {
      has_value();
    } else if (jj_2_6(3)) {
      all_values_from();
    } else if (jj_2_7(3)) {
      some_values_from();
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
}

  final public void exact_cardinality() throws ParseException {
    if (jj_2_8(4)) {
      data_exact_cardinality();
    } else if (jj_2_9(4)) {
      object_exact_cardinality();
    } else if (jj_2_10(4)) {
      untyped_exact_cardinality();
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
}

  final public void data_exact_cardinality() throws ParseException {/*@bgen(jjtree) DataExactCardinality */
  ASTDataExactCardinality jjtn000 = new ASTDataExactCardinality(JJTDATAEXACTCARDINALITY);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);int datatype;
    try {
      data_property();
      jj_consume_token(EXACTLY);
      cardinality_value();
      datatype = datatype();
jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
jjtn000.datatype = datatype;
    } catch (Throwable jjte000) {
if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
}

  final public void object_exact_cardinality() throws ParseException {/*@bgen(jjtree) ObjectExactCardinality */
  ASTObjectExactCardinality jjtn000 = new ASTObjectExactCardinality(JJTOBJECTEXACTCARDINALITY);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);boolean hasExplicitClassExpression = false;
    try {
      object_property();
      jj_consume_token(EXACTLY);
      cardinality_value();
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case TRUE:
      case FALSE:
      case IRI_REF:
      case STRING_LITERAL:
      case INTEGER_LITERAL:
      case FLOAT_LITERAL:
      case NAME:
      case 122:
      case 124:
      case 127:{
        class_expression();
hasExplicitClassExpression = true;
        break;
        }
      default:
        jj_la1[22] = jj_gen;
        ;
      }
jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
jjtn000.hasExplicitClassExpression = hasExplicitClassExpression;
    } catch (Throwable jjte000) {
if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
}

  final public void untyped_exact_cardinality() throws ParseException {/*@bgen(jjtree) UntypedExactCardinality */
  ASTUntypedExactCardinality jjtn000 = new ASTUntypedExactCardinality(JJTUNTYPEDEXACTCARDINALITY);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      property();
      jj_consume_token(EXACTLY);
      cardinality_value();
      reference(MM_UNTYPED);
    } catch (Throwable jjte000) {
if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
}

  final public void max_cardinality() throws ParseException {
    if (jj_2_11(4)) {
      data_max_cardinality();
    } else if (jj_2_12(4)) {
      object_max_cardinality();
    } else if (jj_2_13(4)) {
      untyped_max_cardinality();
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
}

  final public void data_max_cardinality() throws ParseException {/*@bgen(jjtree) DataMaxCardinality */
  ASTDataMaxCardinality jjtn000 = new ASTDataMaxCardinality(JJTDATAMAXCARDINALITY);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);int datatype;
    try {
      data_property();
      jj_consume_token(MAX);
      cardinality_value();
      datatype = datatype();
jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
jjtn000.datatype = datatype;
    } catch (Throwable jjte000) {
if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
}

  final public void object_max_cardinality() throws ParseException {/*@bgen(jjtree) ObjectMaxCardinality */
  ASTObjectMaxCardinality jjtn000 = new ASTObjectMaxCardinality(JJTOBJECTMAXCARDINALITY);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);boolean hasExplicitClassExpression = false;
    try {
      object_property();
      jj_consume_token(MAX);
      cardinality_value();
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case TRUE:
      case FALSE:
      case IRI_REF:
      case STRING_LITERAL:
      case INTEGER_LITERAL:
      case FLOAT_LITERAL:
      case NAME:
      case 122:
      case 124:
      case 127:{
        class_expression();
hasExplicitClassExpression = true;
        break;
        }
      default:
        jj_la1[23] = jj_gen;
        ;
      }
jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
jjtn000.hasExplicitClassExpression = hasExplicitClassExpression;
    } catch (Throwable jjte000) {
if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
}

  final public void untyped_max_cardinality() throws ParseException {/*@bgen(jjtree) UntypedMaxCardinality */
  ASTUntypedMaxCardinality jjtn000 = new ASTUntypedMaxCardinality(JJTUNTYPEDMAXCARDINALITY);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      property();
      jj_consume_token(MAX);
      cardinality_value();
      reference(MM_UNTYPED);
    } catch (Throwable jjte000) {
if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
}

  final public void min_cardinality() throws ParseException {
    if (jj_2_14(4)) {
      data_min_cardinality();
    } else if (jj_2_15(4)) {
      object_min_cardinality();
    } else if (jj_2_16(4)) {
      untyped_min_cardinality();
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
}

  final public void data_min_cardinality() throws ParseException {/*@bgen(jjtree) DataMinCardinality */
  ASTDataMinCardinality jjtn000 = new ASTDataMinCardinality(JJTDATAMINCARDINALITY);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);int datatype;
    try {
      data_property();
      jj_consume_token(MIN);
      cardinality_value();
      datatype = datatype();
jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
jjtn000.datatype = datatype;
    } catch (Throwable jjte000) {
if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
}

  final public void object_min_cardinality() throws ParseException {/*@bgen(jjtree) ObjectMinCardinality */
  ASTObjectMinCardinality jjtn000 = new ASTObjectMinCardinality(JJTOBJECTMINCARDINALITY);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);int cardinality;
  boolean hasExplicitClassExpression = false;
    try {
      object_property();
      jj_consume_token(MIN);
      cardinality_value();
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case TRUE:
      case FALSE:
      case IRI_REF:
      case STRING_LITERAL:
      case INTEGER_LITERAL:
      case FLOAT_LITERAL:
      case NAME:
      case 122:
      case 124:
      case 127:{
        class_expression();
hasExplicitClassExpression = true;
        break;
        }
      default:
        jj_la1[24] = jj_gen;
        ;
      }
jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
jjtn000.hasExplicitClassExpression = hasExplicitClassExpression;
    } catch (Throwable jjte000) {
if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
}

  final public void untyped_min_cardinality() throws ParseException {/*@bgen(jjtree) UntypedMinCardinality */
  ASTUntypedMinCardinality jjtn000 = new ASTUntypedMinCardinality(JJTUNTYPEDMINCARDINALITY);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      property();
      jj_consume_token(MIN);
      cardinality_value();
      reference(MM_UNTYPED);
    } catch (Throwable jjte000) {
if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
}

  final public void cardinality_value() throws ParseException {/*@bgen(jjtree) CardinalityValue */
  ASTCardinalityValue jjtn000 = new ASTCardinalityValue(JJTCARDINALITYVALUE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case 127:{
        reference(XSD_INTEGER);
        break;
        }
      case INTEGER_LITERAL:{
        integer_literal();
        break;
        }
      default:
        jj_la1[25] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
}

  final public void has_value() throws ParseException {
    if (jj_2_17(4)) {
      data_has_value();
    } else if (jj_2_18(4)) {
      object_has_value();
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
}

  final public void data_has_value() throws ParseException {/*@bgen(jjtree) DataHasValue */
  ASTDataHasValue jjtn000 = new ASTDataHasValue(JJTDATAHASVALUE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      data_property();
      jj_consume_token(VALUE);
      literal_value();
    } catch (Throwable jjte000) {
if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
}

  final public void object_has_value() throws ParseException {/*@bgen(jjtree) ObjectHasValue */
  ASTObjectHasValue jjtn000 = new ASTObjectHasValue(JJTOBJECTHASVALUE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      object_property();
      jj_consume_token(VALUE);
      object_value();
    } catch (Throwable jjte000) {
if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
}

  final public void all_values_from() throws ParseException {
    if (jj_2_19(3)) {
      data_all_values_from();
    } else {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case TRUE:
      case FALSE:
      case IRI_REF:
      case STRING_LITERAL:
      case INTEGER_LITERAL:
      case FLOAT_LITERAL:
      case NAME:
      case 127:{
        object_all_values_from();
        break;
        }
      default:
        jj_la1[26] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
}

  final public void data_all_values_from() throws ParseException {/*@bgen(jjtree) DataAllValuesFrom */
  ASTDataAllValuesFrom jjtn000 = new ASTDataAllValuesFrom(JJTDATAALLVALUESFROM);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);int datatype;
    try {
      data_property();
      jj_consume_token(ONLY);
      datatype = datatype();
jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
jjtn000.datatype = datatype;
    } catch (Throwable jjte000) {
if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
}

  final public void object_all_values_from() throws ParseException {/*@bgen(jjtree) ObjectAllValuesFrom */
  ASTObjectAllValuesFrom jjtn000 = new ASTObjectAllValuesFrom(JJTOBJECTALLVALUESFROM);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      object_property();
      jj_consume_token(ONLY);
      class_expression();
    } catch (Throwable jjte000) {
if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
}

  final public void some_values_from() throws ParseException {
    if (jj_2_20(3)) {
      data_some_values_from();
    } else {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case TRUE:
      case FALSE:
      case IRI_REF:
      case STRING_LITERAL:
      case INTEGER_LITERAL:
      case FLOAT_LITERAL:
      case NAME:
      case 127:{
        object_some_values_from();
        break;
        }
      default:
        jj_la1[27] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
}

  final public void data_some_values_from() throws ParseException {/*@bgen(jjtree) DataSomeValuesFrom */
  ASTDataSomeValuesFrom jjtn000 = new ASTDataSomeValuesFrom(JJTDATASOMEVALUESFROM);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);int datatype;
    try {
      data_property();
      jj_consume_token(SOME);
      datatype = datatype();
jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
jjtn000.datatype = datatype;
    } catch (Throwable jjte000) {
if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
}

  final public void object_some_values_from() throws ParseException {/*@bgen(jjtree) ObjectSomeValuesFrom */
  ASTObjectSomeValuesFrom jjtn000 = new ASTObjectSomeValuesFrom(JJTOBJECTSOMEVALUESFROM);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      object_property();
      jj_consume_token(SOME);
      class_expression();
    } catch (Throwable jjte000) {
if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
}

//------------------------------------------------------------------------------------------
// OWL Property
//------------------------------------------------------------------------------------------
  final public 
void property() throws ParseException {/*@bgen(jjtree) Property */
  ASTProperty jjtn000 = new ASTProperty(JJTPROPERTY);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case TRUE:
      case FALSE:
      case IRI_REF:
      case STRING_LITERAL:
      case INTEGER_LITERAL:
      case FLOAT_LITERAL:
      case NAME:{
        value(MM_UNTYPED);
        break;
        }
      case 127:{
        reference(localDirectives.getPropertyType());
        break;
        }
      default:
        jj_la1[28] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
}

  final public void data_property() throws ParseException {/*@bgen(jjtree) DataProperty */
  ASTDataProperty jjtn000 = new ASTDataProperty(JJTDATAPROPERTY);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case TRUE:
      case FALSE:
      case IRI_REF:
      case STRING_LITERAL:
      case INTEGER_LITERAL:
      case FLOAT_LITERAL:
      case NAME:{
        value(OWL_DATA_PROPERTY);
        break;
        }
      case 127:{
        reference(OWL_DATA_PROPERTY);
        break;
        }
      default:
        jj_la1[29] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
}

  final public void object_property() throws ParseException {/*@bgen(jjtree) ObjectProperty */
  ASTObjectProperty jjtn000 = new ASTObjectProperty(JJTOBJECTPROPERTY);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case TRUE:
      case FALSE:
      case IRI_REF:
      case STRING_LITERAL:
      case INTEGER_LITERAL:
      case FLOAT_LITERAL:
      case NAME:{
        value(OWL_OBJECT_PROPERTY);
        break;
        }
      case 127:{
        reference(OWL_OBJECT_PROPERTY);
        break;
        }
      default:
        jj_la1[30] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
}

  final public void annotation_property() throws ParseException {/*@bgen(jjtree) AnnotationProperty */
  ASTAnnotationProperty jjtn000 = new ASTAnnotationProperty(JJTANNOTATIONPROPERTY);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case TRUE:
      case FALSE:
      case IRI_REF:
      case STRING_LITERAL:
      case INTEGER_LITERAL:
      case FLOAT_LITERAL:
      case NAME:{
        value(OWL_ANNOTATION_PROPERTY);
        break;
        }
      case 127:{
        reference(OWL_ANNOTATION_PROPERTY);
        break;
        }
      default:
        jj_la1[31] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
}

//------------------------------------------------------------------------------------------
// OWL Named Individual
//------------------------------------------------------------------------------------------
  final public 
void named_individual() throws ParseException {/*@bgen(jjtree) NamedIndividual */
  ASTNamedIndividual jjtn000 = new ASTNamedIndividual(JJTNAMEDINDIVIDUAL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case TRUE:
      case FALSE:
      case IRI_REF:
      case STRING_LITERAL:
      case INTEGER_LITERAL:
      case FLOAT_LITERAL:
      case NAME:{
        value(OWL_NAMED_INDIVIDUAL);
        break;
        }
      case 127:{
        reference(OWL_NAMED_INDIVIDUAL);
        break;
        }
      default:
        jj_la1[32] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
}

//------------------------------------------------------------------------------------------
// Value Category
//------------------------------------------------------------------------------------------
  final public 
void value(int type) throws ParseException {/*@bgen(jjtree) Value */
  ASTValue jjtn000 = new ASTValue(JJTVALUE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case NAME:{
        name(type);
        break;
        }
      case IRI_REF:{
        iri(type);
        break;
        }
      case TRUE:
      case FALSE:
      case STRING_LITERAL:
      case INTEGER_LITERAL:
      case FLOAT_LITERAL:{
        literal();
        break;
        }
      default:
        jj_la1[33] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
}

  final public void literal_value() throws ParseException {/*@bgen(jjtree) LiteralValue */
  ASTLiteralValue jjtn000 = new ASTLiteralValue(JJTLITERALVALUE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case 127:{
        reference(MM_UNTYPED);
        break;
        }
      case TRUE:
      case FALSE:
      case STRING_LITERAL:
      case INTEGER_LITERAL:
      case FLOAT_LITERAL:{
        literal();
        break;
        }
      default:
        jj_la1[34] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
}

  final public void object_value() throws ParseException {/*@bgen(jjtree) #ObjectValue(true) */
  ASTObjectValue jjtn000 = new ASTObjectValue(JJTOBJECTVALUE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case 127:{
        reference(OWL_NAMED_INDIVIDUAL);
        break;
        }
      case NAME:{
        name(OWL_NAMED_INDIVIDUAL);
        break;
        }
      case IRI_REF:{
        iri(OWL_NAMED_INDIVIDUAL);
        break;
        }
      default:
        jj_la1[35] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
}

  final public void reference(int type) throws ParseException {/*@bgen(jjtree) Reference */
  ASTReference jjtn000 = new ASTReference(JJTREFERENCE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);userDirectives = new ReferenceDirectives(localDirectives).setEntityType(type);
    try {
      reference_notation();
      if (jj_2_21(2)) {
        jj_consume_token(122);
        label_13:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case XSD_STRING:
          case XSD_DECIMAL:
          case XSD_BYTE:
          case XSD_SHORT:
          case XSD_INTEGER:
          case XSD_LONG:
          case XSD_FLOAT:
          case XSD_DOUBLE:
          case XSD_BOOLEAN:
          case XSD_DATETIME:
          case XSD_TIME:
          case XSD_DURATION:
          case XSD_DATE:
          case RDF_PLAINLITERAL:
          case XML_LANG:
          case MM_PREFIX:
          case MM_NAMESPACE:
          case OWL_CLASS:
          case OWL_NAMED_INDIVIDUAL:
          case OWL_OBJECT_PROPERTY:
          case OWL_DATA_PROPERTY:
          case OWL_ANNOTATION_PROPERTY:
          case OWL_LITERAL:
          case OWL_IRI:
          case MM_NO_ENCODE:
          case MM_CAMELCASE_ENCODE:
          case MM_SNAKECASE_ENCODE:
          case MM_UUID_ENCODE:
          case MM_HASH_ENCODE:
          case MM_NO_SHIFT:
          case MM_SHIFT_UP:
          case MM_SHIFT_DOWN:
          case MM_SHIFT_LEFT:
          case MM_SHIFT_RIGHT:
          case MM_CREATE_IF_CELL_EMPTY:
          case MM_IGNORE_IF_CELL_EMPTY:
          case MM_WARNING_IF_CELL_EMPTY:
          case MM_ERROR_IF_CELL_EMPTY:
          case MM_CREATE_IF_ENTITY_ABSENT:
          case MM_IGNORE_IF_ENTITY_ABSENT:
          case MM_WARNING_IF_ENTITY_ABSENT:
          case MM_ERROR_IF_ENTITY_ABSENT:{
            ;
            break;
            }
          default:
            jj_la1[36] = jj_gen;
            break label_13;
          }
          reference_directive();
        }
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case MM_TO_UPPER_CASE:
        case MM_TO_LOWER_CASE:
        case MM_TRIM:
        case MM_PRINTF:
        case MM_DECIMAL_FORMAT:
        case MM_CAPTURING:
        case MM_REVERSE:
        case MM_REPLACE:
        case MM_REPLACE_ALL:
        case MM_REPLACE_FIRST:
        case MM_APPEND:
        case MM_PREPEND:
        case 129:{
          builtin_function();
jjtn000.hasBuiltInFunction = true;
          break;
          }
        default:
          jj_la1[37] = jj_gen;
          ;
        }
        jj_consume_token(123);
      } else {
        ;
      }
jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
jjtn000.referenceDirectives = new ReferenceDirectives(userDirectives);
    } catch (Throwable jjte000) {
if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
}

  final public void name(int type) throws ParseException {/*@bgen(jjtree) Name */
  ASTName jjtn000 = new ASTName(JJTNAME);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);String name;
    try {
      if (jj_2_22(2)) {
        name = prefixed_name();
      } else if (jj_2_23(2)) {
        name = unprefixed_name();
      } else {
        jj_consume_token(-1);
        throw new ParseException();
      }
jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
jjtn000.name = name;
    jjtn000.entityType = type;
    } catch (Throwable jjte000) {
if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
}

  final public String prefixed_name() throws ParseException {Token t1;
  Token t2;
    t1 = jj_consume_token(NAME);
    jj_consume_token(126);
    t2 = jj_consume_token(NAME);
{if ("" != null) return t1.image + ":" + t2.image;}
    throw new Error("Missing return statement in function");
}

  final public String unprefixed_name() throws ParseException {Token t;
    t = jj_consume_token(NAME);
{if ("" != null) return t.image;}
    throw new Error("Missing return statement in function");
}

  final public void iri(int type) throws ParseException {/*@bgen(jjtree) Iri */
  ASTIri jjtn000 = new ASTIri(JJTIRI);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);Token t;
    try {
      t = jj_consume_token(IRI_REF);
jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
jjtn000.iri = t.image;
    jjtn000.entityType = type;
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
}

  final public void literal() throws ParseException {/*@bgen(jjtree) Literal */
  ASTLiteral jjtn000 = new ASTLiteral(JJTLITERAL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case INTEGER_LITERAL:{
        integer_literal();
        break;
        }
      case FLOAT_LITERAL:{
        float_literal();
        break;
        }
      case STRING_LITERAL:{
        string_literal();
        break;
        }
      case TRUE:
      case FALSE:{
        boolean_literal();
        break;
        }
      default:
        jj_la1[38] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
}

  final public void integer_literal() throws ParseException {/*@bgen(jjtree) IntegerLiteral */
  ASTIntegerLiteral jjtn000 = new ASTIntegerLiteral(JJTINTEGERLITERAL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);int value;
    try {
      value = integer_value();
jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
jjtn000.lexicalValue = value;
    } catch (Throwable jjte000) {
if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
}

  final public void float_literal() throws ParseException {/*@bgen(jjtree) FloatLiteral */
  ASTFloatLiteral jjtn000 = new ASTFloatLiteral(JJTFLOATLITERAL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);float value;
    try {
      value = float_value();
jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
jjtn000.lexicalValue = value;
    } catch (Throwable jjte000) {
if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
}

  final public void string_literal() throws ParseException {/*@bgen(jjtree) StringLiteral */
  ASTStringLiteral jjtn000 = new ASTStringLiteral(JJTSTRINGLITERAL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);String value;
    try {
      value = string_value();
jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
jjtn000.lexicalValue = value;
    } catch (Throwable jjte000) {
if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
}

  final public void boolean_literal() throws ParseException {/*@bgen(jjtree) BooleanLiteral */
  ASTBooleanLiteral jjtn000 = new ASTBooleanLiteral(JJTBOOLEANLITERAL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);boolean value;
    try {
      value = boolean_value();
jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
jjtn000.lexicalValue = value;
    } catch (Throwable jjte000) {
if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
}

//------------------------------------------------------------------------------------------
// Cell Reference
//------------------------------------------------------------------------------------------
  final public 
void reference_notation() throws ParseException {/*@bgen(jjtree) ReferenceNotation */
  ASTReferenceNotation jjtn000 = new ASTReferenceNotation(JJTREFERENCENOTATION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);String cellReference;
    try {
      jj_consume_token(127);
      cellReference = cell_reference();
jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
jjtn000.referenceNotation = new ReferenceNotation(cellReference);
    } catch (Throwable jjte000) {
if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
}

  final public String quoted_name() throws ParseException {Token t;
    t = jj_consume_token(QUOTED_NAME);
String s = t.image;
    {if ("" != null) return s.substring(1, s.length() - 1);}
    throw new Error("Missing return statement in function");
}

  final public String cell_reference() throws ParseException {Token t;
    t = jj_consume_token(CELL_REFERENCE);
{if ("" != null) return t.image;}
    throw new Error("Missing return statement in function");
}

//------------------------------------------------------------------------------------------
// Reference Directives
//------------------------------------------------------------------------------------------
  final public 
void reference_directive() throws ParseException {int value;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case MM_PREFIX:{
      prefix_directive();
      break;
      }
    case MM_NAMESPACE:{
      namespace_directive();
      break;
      }
    case XML_LANG:{
      language_directive();
      break;
      }
    case OWL_CLASS:
    case OWL_NAMED_INDIVIDUAL:
    case OWL_OBJECT_PROPERTY:
    case OWL_DATA_PROPERTY:
    case OWL_ANNOTATION_PROPERTY:
    case OWL_LITERAL:
    case OWL_IRI:{
      value = reference_type();
userDirectives = userDirectives.setEntityType(value);
      break;
      }
    case XSD_STRING:
    case XSD_DECIMAL:
    case XSD_BYTE:
    case XSD_SHORT:
    case XSD_INTEGER:
    case XSD_LONG:
    case XSD_FLOAT:
    case XSD_DOUBLE:
    case XSD_BOOLEAN:
    case XSD_DATETIME:
    case XSD_TIME:
    case XSD_DURATION:
    case XSD_DATE:
    case RDF_PLAINLITERAL:{
      value = datatype();
userDirectives = userDirectives.setValueDatatype(value).setEntityType(OWL_LITERAL);
      break;
      }
    case MM_NO_ENCODE:
    case MM_CAMELCASE_ENCODE:
    case MM_SNAKECASE_ENCODE:
    case MM_UUID_ENCODE:
    case MM_HASH_ENCODE:{
      value = iri_encoding();
userDirectives = userDirectives.setIriEncoding(value);
      break;
      }
    case MM_NO_SHIFT:
    case MM_SHIFT_UP:
    case MM_SHIFT_DOWN:
    case MM_SHIFT_LEFT:
    case MM_SHIFT_RIGHT:{
      value = shift_direction();
userDirectives = userDirectives.setShiftDirection(value);
      break;
      }
    case MM_CREATE_IF_CELL_EMPTY:
    case MM_IGNORE_IF_CELL_EMPTY:
    case MM_WARNING_IF_CELL_EMPTY:
    case MM_ERROR_IF_CELL_EMPTY:{
      value = order_if_cell_empty();
userDirectives = userDirectives.setOrderIfCellEmpty(value);
      break;
      }
    case MM_CREATE_IF_ENTITY_ABSENT:
    case MM_IGNORE_IF_ENTITY_ABSENT:
    case MM_WARNING_IF_ENTITY_ABSENT:
    case MM_ERROR_IF_ENTITY_ABSENT:{
      value = order_if_entity_absent();
userDirectives = userDirectives.setOrderIfEntityAbsent(value);
      break;
      }
    default:
      jj_la1[39] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
}

  final public void prefix_directive() throws ParseException {String prefixValue;
    jj_consume_token(MM_PREFIX);
    jj_consume_token(120);
    prefixValue = string_value();
userDirectives = userDirectives.setPrefix(prefixValue);
}

  final public void namespace_directive() throws ParseException {String namespaceValue;
    jj_consume_token(MM_NAMESPACE);
    jj_consume_token(120);
    namespaceValue = string_value();
userDirectives = userDirectives.setNamespace(namespaceValue);
}

  final public void language_directive() throws ParseException {String languageValue;
    jj_consume_token(XML_LANG);
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case 120:{
      jj_consume_token(120);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case MM_NULL:{
        jj_consume_token(MM_NULL);
languageValue = "";
        break;
        }
      case CELL_WILDCARD:{
        jj_consume_token(CELL_WILDCARD);
languageValue = "*";
        break;
        }
      case STRING_LITERAL:{
        languageValue = string_value();
        break;
        }
      default:
        jj_la1[40] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
      }
    case 128:{
      jj_consume_token(128);
      jj_consume_token(120);
      jj_consume_token(MM_NULL);
languageValue = "+";
      break;
      }
    default:
      jj_la1[41] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
userDirectives = userDirectives.setLanguage(languageValue)
                            .setEntityType(OWL_LITERAL)
                            .setValueDatatype(RDF_PLAINLITERAL);
}

//------------------------------------------------------------------------------------------
// Value Extraction Functions
//------------------------------------------------------------------------------------------
  final public 
void builtin_function() throws ParseException {/*@bgen(jjtree) BuiltInFunction */
  ASTBuiltInFunction jjtn000 = new ASTBuiltInFunction(JJTBUILTINFUNCTION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);Token t;
  int functionType;
    try {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case MM_TO_UPPER_CASE:
      case MM_TO_LOWER_CASE:
      case MM_TRIM:
      case MM_PRINTF:
      case MM_DECIMAL_FORMAT:
      case MM_CAPTURING:
      case MM_REVERSE:
      case MM_REPLACE:
      case MM_REPLACE_ALL:
      case MM_REPLACE_FIRST:
      case MM_APPEND:
      case MM_PREPEND:{
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case MM_TO_UPPER_CASE:{
          t = jj_consume_token(MM_TO_UPPER_CASE);
functionType = t.kind;
          break;
          }
        case MM_TO_LOWER_CASE:{
          t = jj_consume_token(MM_TO_LOWER_CASE);
functionType = t.kind;
          break;
          }
        case MM_TRIM:{
          t = jj_consume_token(MM_TRIM);
functionType = t.kind;
          break;
          }
        case MM_PRINTF:{
          t = jj_consume_token(MM_PRINTF);
functionType = t.kind;
          break;
          }
        case MM_DECIMAL_FORMAT:{
          t = jj_consume_token(MM_DECIMAL_FORMAT);
functionType = t.kind;
          break;
          }
        case MM_REVERSE:{
          t = jj_consume_token(MM_REVERSE);
functionType = t.kind;
          break;
          }
        case MM_CAPTURING:{
          t = jj_consume_token(MM_CAPTURING);
functionType = t.kind;
          break;
          }
        case MM_REPLACE:{
          t = jj_consume_token(MM_REPLACE);
functionType = t.kind;
          break;
          }
        case MM_REPLACE_ALL:{
          t = jj_consume_token(MM_REPLACE_ALL);
functionType = t.kind;
          break;
          }
        case MM_REPLACE_FIRST:{
          t = jj_consume_token(MM_REPLACE_FIRST);
functionType = t.kind;
          break;
          }
        case MM_APPEND:{
          t = jj_consume_token(MM_APPEND);
functionType = t.kind;
          break;
          }
        case MM_PREPEND:{
          t = jj_consume_token(MM_PREPEND);
functionType = t.kind;
          break;
          }
        default:
          jj_la1[42] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case 122:{
          jj_consume_token(122);
          argument_list();
          jj_consume_token(123);
          break;
          }
        default:
          jj_la1[43] = jj_gen;
          ;
        }
        break;
        }
      case 129:{
        jj_consume_token(129);
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case TRUE:
        case FALSE:
        case STRING_LITERAL:
        case INTEGER_LITERAL:
        case FLOAT_LITERAL:
        case 127:{
          argument_list();
          break;
          }
        default:
          jj_la1[44] = jj_gen;
          ;
        }
        jj_consume_token(130);
functionType = MM_CAPTURING;
        break;
        }
      default:
        jj_la1[45] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
jjtn000.functionType = functionType;
    } catch (Throwable jjte000) {
if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
}

  final public void argument_list() throws ParseException {/*@bgen(jjtree) ArgumentList */
  ASTArgumentList jjtn000 = new ASTArgumentList(JJTARGUMENTLIST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      argument();
      label_14:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case 121:{
          ;
          break;
          }
        default:
          jj_la1[46] = jj_gen;
          break label_14;
        }
        jj_consume_token(121);
        argument();
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
}

  final public void argument() throws ParseException {/*@bgen(jjtree) Argument */
  ASTArgument jjtn000 = new ASTArgument(JJTARGUMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case 127:{
        reference_notation();
        break;
        }
      case TRUE:
      case FALSE:
      case STRING_LITERAL:
      case INTEGER_LITERAL:
      case FLOAT_LITERAL:{
        literal();
        break;
        }
      default:
        jj_la1[47] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
}

//------------------------------------------------------------------------------------------
// Literal Values
//------------------------------------------------------------------------------------------
  final public 
int integer_value() throws ParseException {Token t;
    t = jj_consume_token(INTEGER_LITERAL);
{if ("" != null) return Integer.parseInt(t.image);}
    throw new Error("Missing return statement in function");
}

  final public float float_value() throws ParseException {Token t;
    t = jj_consume_token(FLOAT_LITERAL);
{if ("" != null) return Float.valueOf(t.image);}
    throw new Error("Missing return statement in function");
}

  final public String string_value() throws ParseException {Token t;
  String str;
    t = jj_consume_token(STRING_LITERAL);
str = t.image;
    {if ("" != null) return str.substring(1, str.length() - 1);}
    throw new Error("Missing return statement in function");
}

  final public boolean boolean_value() throws ParseException {Token t;
  boolean value;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case TRUE:{
      jj_consume_token(TRUE);
value = true;
      break;
      }
    case FALSE:{
      jj_consume_token(FALSE);
value = false;
      break;
      }
    default:
      jj_la1[48] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
{if ("" != null) return value;}
    throw new Error("Missing return statement in function");
}

//------------------------------------------------------------------------------------------
// Literal Datatypes
//------------------------------------------------------------------------------------------
  final public 
int datatype() throws ParseException {Token t;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case XSD_STRING:{
      t = jj_consume_token(XSD_STRING);
      break;
      }
    case XSD_DECIMAL:{
      t = jj_consume_token(XSD_DECIMAL);
      break;
      }
    case XSD_BYTE:{
      t = jj_consume_token(XSD_BYTE);
      break;
      }
    case XSD_SHORT:{
      t = jj_consume_token(XSD_SHORT);
      break;
      }
    case XSD_INTEGER:{
      t = jj_consume_token(XSD_INTEGER);
      break;
      }
    case XSD_LONG:{
      t = jj_consume_token(XSD_LONG);
      break;
      }
    case XSD_FLOAT:{
      t = jj_consume_token(XSD_FLOAT);
      break;
      }
    case XSD_DOUBLE:{
      t = jj_consume_token(XSD_DOUBLE);
      break;
      }
    case XSD_BOOLEAN:{
      t = jj_consume_token(XSD_BOOLEAN);
      break;
      }
    case XSD_TIME:{
      t = jj_consume_token(XSD_TIME);
      break;
      }
    case XSD_DATETIME:{
      t = jj_consume_token(XSD_DATETIME);
      break;
      }
    case XSD_DATE:{
      t = jj_consume_token(XSD_DATE);
      break;
      }
    case XSD_DURATION:{
      t = jj_consume_token(XSD_DURATION);
      break;
      }
    case RDF_PLAINLITERAL:{
      t = jj_consume_token(RDF_PLAINLITERAL);
      break;
      }
    default:
      jj_la1[49] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
{if ("" != null) return t.kind;}
    throw new Error("Missing return statement in function");
}

//------------------------------------------------------------------------------------------
// Enumeration Types
//------------------------------------------------------------------------------------------
  final public 
int iri_encoding() throws ParseException {Token t;
  int encodingType;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case MM_NO_ENCODE:{
      t = jj_consume_token(MM_NO_ENCODE);
encodingType = t.kind;
      break;
      }
    case MM_CAMELCASE_ENCODE:{
      t = jj_consume_token(MM_CAMELCASE_ENCODE);
encodingType = t.kind;
      break;
      }
    case MM_SNAKECASE_ENCODE:{
      t = jj_consume_token(MM_SNAKECASE_ENCODE);
encodingType = t.kind;
      break;
      }
    case MM_UUID_ENCODE:{
      t = jj_consume_token(MM_UUID_ENCODE);
encodingType = t.kind;
      break;
      }
    case MM_HASH_ENCODE:{
      t = jj_consume_token(MM_HASH_ENCODE);
encodingType = t.kind;
      break;
      }
    default:
      jj_la1[50] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
{if ("" != null) return encodingType;}
    throw new Error("Missing return statement in function");
}

  final public int reference_type() throws ParseException {Token t;
  int entityType;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case OWL_CLASS:{
      t = jj_consume_token(OWL_CLASS);
entityType = t.kind;
      break;
      }
    case OWL_NAMED_INDIVIDUAL:{
      t = jj_consume_token(OWL_NAMED_INDIVIDUAL);
entityType = t.kind;
      break;
      }
    case OWL_OBJECT_PROPERTY:{
      t = jj_consume_token(OWL_OBJECT_PROPERTY);
entityType = t.kind;
      break;
      }
    case OWL_DATA_PROPERTY:{
      t = jj_consume_token(OWL_DATA_PROPERTY);
entityType = t.kind;
      break;
      }
    case OWL_ANNOTATION_PROPERTY:{
      t = jj_consume_token(OWL_ANNOTATION_PROPERTY);
entityType = t.kind;
      break;
      }
    case OWL_IRI:{
      t = jj_consume_token(OWL_IRI);
entityType = t.kind;
      break;
      }
    case OWL_LITERAL:{
      t = jj_consume_token(OWL_LITERAL);
entityType = t.kind;
      break;
      }
    default:
      jj_la1[51] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
{if ("" != null) return entityType;}
    throw new Error("Missing return statement in function");
}

  final public int property_type() throws ParseException {Token t;
  int propertyType;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case OWL_DATA_PROPERTY:{
      t = jj_consume_token(OWL_DATA_PROPERTY);
propertyType = t.kind;
      break;
      }
    case OWL_OBJECT_PROPERTY:{
      t = jj_consume_token(OWL_OBJECT_PROPERTY);
propertyType = t.kind;
      break;
      }
    case OWL_ANNOTATION_PROPERTY:{
      t = jj_consume_token(OWL_ANNOTATION_PROPERTY);
propertyType = t.kind;
      break;
      }
    default:
      jj_la1[52] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
{if ("" != null) return propertyType;}
    throw new Error("Missing return statement in function");
}

  final public int shift_direction() throws ParseException {Token t;
  int shiftDirection;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case MM_SHIFT_UP:{
      t = jj_consume_token(MM_SHIFT_UP);
shiftDirection = t.kind;
      break;
      }
    case MM_SHIFT_DOWN:{
      t = jj_consume_token(MM_SHIFT_DOWN);
shiftDirection = t.kind;
      break;
      }
    case MM_SHIFT_LEFT:{
      t = jj_consume_token(MM_SHIFT_LEFT);
shiftDirection = t.kind;
      break;
      }
    case MM_SHIFT_RIGHT:{
      t = jj_consume_token(MM_SHIFT_RIGHT);
shiftDirection = t.kind;
      break;
      }
    case MM_NO_SHIFT:{
      t = jj_consume_token(MM_NO_SHIFT);
shiftDirection = t.kind;
      break;
      }
    default:
      jj_la1[53] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
{if ("" != null) return shiftDirection;}
    throw new Error("Missing return statement in function");
}

  final public int order_if_cell_empty() throws ParseException {Token t;
  int orderIfCellEmpty;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case MM_CREATE_IF_CELL_EMPTY:{
      t = jj_consume_token(MM_CREATE_IF_CELL_EMPTY);
orderIfCellEmpty = t.kind;
      break;
      }
    case MM_IGNORE_IF_CELL_EMPTY:{
      t = jj_consume_token(MM_IGNORE_IF_CELL_EMPTY);
orderIfCellEmpty = t.kind;
      break;
      }
    case MM_WARNING_IF_CELL_EMPTY:{
      t = jj_consume_token(MM_WARNING_IF_CELL_EMPTY);
orderIfCellEmpty = t.kind;
      break;
      }
    case MM_ERROR_IF_CELL_EMPTY:{
      t = jj_consume_token(MM_ERROR_IF_CELL_EMPTY);
orderIfCellEmpty = t.kind;
      break;
      }
    default:
      jj_la1[54] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
{if ("" != null) return orderIfCellEmpty;}
    throw new Error("Missing return statement in function");
}

  final public int order_if_entity_absent() throws ParseException {Token t;
  int orderIfEntityAbsent;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case MM_CREATE_IF_ENTITY_ABSENT:{
      t = jj_consume_token(MM_CREATE_IF_ENTITY_ABSENT);
orderIfEntityAbsent = t.kind;
      break;
      }
    case MM_IGNORE_IF_ENTITY_ABSENT:{
      t = jj_consume_token(MM_IGNORE_IF_ENTITY_ABSENT);
orderIfEntityAbsent = t.kind;
      break;
      }
    case MM_WARNING_IF_ENTITY_ABSENT:{
      t = jj_consume_token(MM_WARNING_IF_ENTITY_ABSENT);
orderIfEntityAbsent = t.kind;
      break;
      }
    case MM_ERROR_IF_ENTITY_ABSENT:{
      t = jj_consume_token(MM_ERROR_IF_ENTITY_ABSENT);
orderIfEntityAbsent = t.kind;
      break;
      }
    default:
      jj_la1[55] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
{if ("" != null) return orderIfEntityAbsent;}
    throw new Error("Missing return statement in function");
}

  final public int order_type() throws ParseException {Token t;
  int orderType;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case CREATE:{
      t = jj_consume_token(CREATE);
orderType = t.kind;
      break;
      }
    case IGNORE:{
      t = jj_consume_token(IGNORE);
orderType = t.kind;
      break;
      }
    case WARNING:{
      t = jj_consume_token(WARNING);
orderType = t.kind;
      break;
      }
    case ERROR:{
      t = jj_consume_token(ERROR);
orderType = t.kind;
      break;
      }
    default:
      jj_la1[56] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
{if ("" != null) return orderType;}
    throw new Error("Missing return statement in function");
}

  private boolean jj_2_1(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_1()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  private boolean jj_2_2(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_2()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(1, xla); }
  }

  private boolean jj_2_3(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_3()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(2, xla); }
  }

  private boolean jj_2_4(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_4()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(3, xla); }
  }

  private boolean jj_2_5(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_5()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(4, xla); }
  }

  private boolean jj_2_6(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_6()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(5, xla); }
  }

  private boolean jj_2_7(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_7()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(6, xla); }
  }

  private boolean jj_2_8(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_8()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(7, xla); }
  }

  private boolean jj_2_9(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_9()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(8, xla); }
  }

  private boolean jj_2_10(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_10()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(9, xla); }
  }

  private boolean jj_2_11(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_11()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(10, xla); }
  }

  private boolean jj_2_12(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_12()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(11, xla); }
  }

  private boolean jj_2_13(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_13()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(12, xla); }
  }

  private boolean jj_2_14(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_14()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(13, xla); }
  }

  private boolean jj_2_15(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_15()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(14, xla); }
  }

  private boolean jj_2_16(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_16()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(15, xla); }
  }

  private boolean jj_2_17(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_17()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(16, xla); }
  }

  private boolean jj_2_18(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_18()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(17, xla); }
  }

  private boolean jj_2_19(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_19()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(18, xla); }
  }

  private boolean jj_2_20(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_20()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(19, xla); }
  }

  private boolean jj_2_21(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_21()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(20, xla); }
  }

  private boolean jj_2_22(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_22()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(21, xla); }
  }

  private boolean jj_2_23(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_23()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(22, xla); }
  }

  private boolean jj_3R_33()
 {
    if (jj_3R_41()) return true;
    if (jj_scan_token(ONLY)) return true;
    if (jj_3R_43()) return true;
    return false;
  }

  private boolean jj_3R_151()
 {
    if (jj_scan_token(FLOAT_LITERAL)) return true;
    return false;
  }

  private boolean jj_3R_39()
 {
    if (jj_3R_54()) return true;
    return false;
  }

  private boolean jj_3_19()
 {
    if (jj_3R_33()) return true;
    return false;
  }

  private boolean jj_3R_20()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_19()) {
    jj_scanpos = xsp;
    if (jj_3R_39()) return true;
    }
    return false;
  }

  private boolean jj_3R_113()
 {
    if (jj_scan_token(INTEGER_LITERAL)) return true;
    return false;
  }

  private boolean jj_3R_32()
 {
    if (jj_3R_44()) return true;
    if (jj_scan_token(VALUE)) return true;
    if (jj_3R_51()) return true;
    return false;
  }

  private boolean jj_3R_31()
 {
    if (jj_3R_41()) return true;
    if (jj_scan_token(VALUE)) return true;
    if (jj_3R_50()) return true;
    return false;
  }

  private boolean jj_3_18()
 {
    if (jj_3R_32()) return true;
    return false;
  }

  private boolean jj_3_17()
 {
    if (jj_3R_31()) return true;
    return false;
  }

  private boolean jj_3R_19()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_17()) {
    jj_scanpos = xsp;
    if (jj_3_18()) return true;
    }
    return false;
  }

  private boolean jj_3R_59()
 {
    if (jj_3R_83()) return true;
    return false;
  }

  private boolean jj_3R_58()
 {
    if (jj_3R_47()) return true;
    return false;
  }

  private boolean jj_3R_42()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_58()) {
    jj_scanpos = xsp;
    if (jj_3R_59()) return true;
    }
    return false;
  }

  private boolean jj_3R_81()
 {
    if (jj_scan_token(129)) return true;
    return false;
  }

  private boolean jj_3R_109()
 {
    if (jj_scan_token(MM_PREPEND)) return true;
    return false;
  }

  private boolean jj_3R_108()
 {
    if (jj_scan_token(MM_APPEND)) return true;
    return false;
  }

  private boolean jj_3R_107()
 {
    if (jj_scan_token(MM_REPLACE_FIRST)) return true;
    return false;
  }

  private boolean jj_3R_30()
 {
    if (jj_3R_46()) return true;
    if (jj_scan_token(MIN)) return true;
    if (jj_3R_42()) return true;
    if (jj_3R_47()) return true;
    return false;
  }

  private boolean jj_3R_106()
 {
    if (jj_scan_token(MM_REPLACE_ALL)) return true;
    return false;
  }

  private boolean jj_3R_105()
 {
    if (jj_scan_token(MM_REPLACE)) return true;
    return false;
  }

  private boolean jj_3R_104()
 {
    if (jj_scan_token(MM_CAPTURING)) return true;
    return false;
  }

  private boolean jj_3R_49()
 {
    if (jj_3R_62()) return true;
    return false;
  }

  private boolean jj_3R_103()
 {
    if (jj_scan_token(MM_REVERSE)) return true;
    return false;
  }

  private boolean jj_3R_102()
 {
    if (jj_scan_token(MM_DECIMAL_FORMAT)) return true;
    return false;
  }

  private boolean jj_3R_101()
 {
    if (jj_scan_token(MM_PRINTF)) return true;
    return false;
  }

  private boolean jj_3R_100()
 {
    if (jj_scan_token(MM_TRIM)) return true;
    return false;
  }

  private boolean jj_3R_99()
 {
    if (jj_scan_token(MM_TO_LOWER_CASE)) return true;
    return false;
  }

  private boolean jj_3R_29()
 {
    if (jj_3R_44()) return true;
    if (jj_scan_token(MIN)) return true;
    if (jj_3R_42()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_49()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_98()
 {
    if (jj_scan_token(MM_TO_UPPER_CASE)) return true;
    return false;
  }

  private boolean jj_3R_80()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_98()) {
    jj_scanpos = xsp;
    if (jj_3R_99()) {
    jj_scanpos = xsp;
    if (jj_3R_100()) {
    jj_scanpos = xsp;
    if (jj_3R_101()) {
    jj_scanpos = xsp;
    if (jj_3R_102()) {
    jj_scanpos = xsp;
    if (jj_3R_103()) {
    jj_scanpos = xsp;
    if (jj_3R_104()) {
    jj_scanpos = xsp;
    if (jj_3R_105()) {
    jj_scanpos = xsp;
    if (jj_3R_106()) {
    jj_scanpos = xsp;
    if (jj_3R_107()) {
    jj_scanpos = xsp;
    if (jj_3R_108()) {
    jj_scanpos = xsp;
    if (jj_3R_109()) return true;
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_53()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_80()) {
    jj_scanpos = xsp;
    if (jj_3R_81()) return true;
    }
    return false;
  }

  private boolean jj_3R_28()
 {
    if (jj_3R_41()) return true;
    if (jj_scan_token(MIN)) return true;
    if (jj_3R_42()) return true;
    if (jj_3R_43()) return true;
    return false;
  }

  private boolean jj_3_16()
 {
    if (jj_3R_30()) return true;
    return false;
  }

  private boolean jj_3_15()
 {
    if (jj_3R_29()) return true;
    return false;
  }

  private boolean jj_3_14()
 {
    if (jj_3R_28()) return true;
    return false;
  }

  private boolean jj_3R_18()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_14()) {
    jj_scanpos = xsp;
    if (jj_3_15()) {
    jj_scanpos = xsp;
    if (jj_3_16()) return true;
    }
    }
    return false;
  }

  private boolean jj_3R_27()
 {
    if (jj_3R_46()) return true;
    if (jj_scan_token(MAX)) return true;
    if (jj_3R_42()) return true;
    if (jj_3R_47()) return true;
    return false;
  }

  private boolean jj_3R_92()
 {
    if (jj_scan_token(XML_LANG)) return true;
    return false;
  }

  private boolean jj_3R_48()
 {
    if (jj_3R_62()) return true;
    return false;
  }

  private boolean jj_3R_26()
 {
    if (jj_3R_44()) return true;
    if (jj_scan_token(MAX)) return true;
    if (jj_3R_42()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_48()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_91()
 {
    if (jj_scan_token(MM_NAMESPACE)) return true;
    return false;
  }

  private boolean jj_3R_25()
 {
    if (jj_3R_41()) return true;
    if (jj_scan_token(MAX)) return true;
    if (jj_3R_42()) return true;
    if (jj_3R_43()) return true;
    return false;
  }

  private boolean jj_3R_90()
 {
    if (jj_scan_token(MM_PREFIX)) return true;
    return false;
  }

  private boolean jj_3_13()
 {
    if (jj_3R_27()) return true;
    return false;
  }

  private boolean jj_3_12()
 {
    if (jj_3R_26()) return true;
    return false;
  }

  private boolean jj_3R_79()
 {
    if (jj_3R_97()) return true;
    return false;
  }

  private boolean jj_3R_78()
 {
    if (jj_3R_96()) return true;
    return false;
  }

  private boolean jj_3_11()
 {
    if (jj_3R_25()) return true;
    return false;
  }

  private boolean jj_3R_77()
 {
    if (jj_3R_95()) return true;
    return false;
  }

  private boolean jj_3R_76()
 {
    if (jj_3R_94()) return true;
    return false;
  }

  private boolean jj_3R_17()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_11()) {
    jj_scanpos = xsp;
    if (jj_3_12()) {
    jj_scanpos = xsp;
    if (jj_3_13()) return true;
    }
    }
    return false;
  }

  private boolean jj_3R_75()
 {
    if (jj_3R_43()) return true;
    return false;
  }

  private boolean jj_3R_74()
 {
    if (jj_3R_93()) return true;
    return false;
  }

  private boolean jj_3R_73()
 {
    if (jj_3R_92()) return true;
    return false;
  }

  private boolean jj_3R_72()
 {
    if (jj_3R_91()) return true;
    return false;
  }

  private boolean jj_3R_24()
 {
    if (jj_3R_46()) return true;
    if (jj_scan_token(EXACTLY)) return true;
    if (jj_3R_42()) return true;
    if (jj_3R_47()) return true;
    return false;
  }

  private boolean jj_3R_71()
 {
    if (jj_3R_90()) return true;
    return false;
  }

  private boolean jj_3R_45()
 {
    if (jj_3R_62()) return true;
    return false;
  }

  private boolean jj_3R_52()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_71()) {
    jj_scanpos = xsp;
    if (jj_3R_72()) {
    jj_scanpos = xsp;
    if (jj_3R_73()) {
    jj_scanpos = xsp;
    if (jj_3R_74()) {
    jj_scanpos = xsp;
    if (jj_3R_75()) {
    jj_scanpos = xsp;
    if (jj_3R_76()) {
    jj_scanpos = xsp;
    if (jj_3R_77()) {
    jj_scanpos = xsp;
    if (jj_3R_78()) {
    jj_scanpos = xsp;
    if (jj_3R_79()) return true;
    }
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_23()
 {
    if (jj_3R_44()) return true;
    if (jj_scan_token(EXACTLY)) return true;
    if (jj_3R_42()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_45()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_145()
 {
    if (jj_scan_token(CELL_REFERENCE)) return true;
    return false;
  }

  private boolean jj_3R_22()
 {
    if (jj_3R_41()) return true;
    if (jj_scan_token(EXACTLY)) return true;
    if (jj_3R_42()) return true;
    if (jj_3R_43()) return true;
    return false;
  }

  private boolean jj_3_10()
 {
    if (jj_3R_24()) return true;
    return false;
  }

  private boolean jj_3_9()
 {
    if (jj_3R_23()) return true;
    return false;
  }

  private boolean jj_3_8()
 {
    if (jj_3R_22()) return true;
    return false;
  }

  private boolean jj_3R_16()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_8()) {
    jj_scanpos = xsp;
    if (jj_3_9()) {
    jj_scanpos = xsp;
    if (jj_3_10()) return true;
    }
    }
    return false;
  }

  private boolean jj_3_7()
 {
    if (jj_3R_21()) return true;
    return false;
  }

  private boolean jj_3_6()
 {
    if (jj_3R_20()) return true;
    return false;
  }

  private boolean jj_3_5()
 {
    if (jj_3R_19()) return true;
    return false;
  }

  private boolean jj_3_4()
 {
    if (jj_3R_18()) return true;
    return false;
  }

  private boolean jj_3_3()
 {
    if (jj_3R_17()) return true;
    return false;
  }

  private boolean jj_3_2()
 {
    if (jj_3R_16()) return true;
    return false;
  }

  private boolean jj_3R_65()
 {
    if (jj_scan_token(127)) return true;
    if (jj_3R_145()) return true;
    return false;
  }

  private boolean jj_3R_15()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_2()) {
    jj_scanpos = xsp;
    if (jj_3_3()) {
    jj_scanpos = xsp;
    if (jj_3_4()) {
    jj_scanpos = xsp;
    if (jj_3_5()) {
    jj_scanpos = xsp;
    if (jj_3_6()) {
    jj_scanpos = xsp;
    if (jj_3_7()) return true;
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_115()
 {
    if (jj_scan_token(124)) return true;
    if (jj_3R_159()) return true;
    return false;
  }

  private boolean jj_3R_150()
 {
    if (jj_3R_153()) return true;
    return false;
  }

  private boolean jj_3R_161()
 {
    if (jj_scan_token(NOT)) return true;
    return false;
  }

  private boolean jj_3R_147()
 {
    if (jj_3R_47()) return true;
    return false;
  }

  private boolean jj_3R_164()
 {
    if (jj_3R_62()) return true;
    return false;
  }

  private boolean jj_3R_160()
 {
    if (jj_3R_164()) return true;
    return false;
  }

  private boolean jj_3R_149()
 {
    if (jj_3R_152()) return true;
    return false;
  }

  private boolean jj_3R_158()
 {
    if (jj_3R_161()) return true;
    return false;
  }

  private boolean jj_3R_157()
 {
    if (jj_3R_160()) return true;
    return false;
  }

  private boolean jj_3R_154()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_157()) {
    jj_scanpos = xsp;
    if (jj_3R_158()) return true;
    }
    return false;
  }

  private boolean jj_3R_148()
 {
    if (jj_3R_151()) return true;
    return false;
  }

  private boolean jj_3R_146()
 {
    if (jj_3R_82()) return true;
    return false;
  }

  private boolean jj_3R_114()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_146()) {
    jj_scanpos = xsp;
    if (jj_3R_147()) return true;
    }
    return false;
  }

  private boolean jj_3R_86()
 {
    if (jj_3R_115()) return true;
    return false;
  }

  private boolean jj_3R_85()
 {
    if (jj_scan_token(122)) return true;
    if (jj_3R_154()) return true;
    return false;
  }

  private boolean jj_3R_84()
 {
    if (jj_3R_114()) return true;
    return false;
  }

  private boolean jj_3_1()
 {
    if (jj_3R_15()) return true;
    return false;
  }

  private boolean jj_3R_62()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_1()) {
    jj_scanpos = xsp;
    if (jj_3R_84()) {
    jj_scanpos = xsp;
    if (jj_3R_85()) {
    jj_scanpos = xsp;
    if (jj_3R_86()) return true;
    }
    }
    }
    return false;
  }

  private boolean jj_3R_83()
 {
    if (jj_3R_113()) return true;
    return false;
  }

  private boolean jj_3R_119()
 {
    if (jj_3R_150()) return true;
    return false;
  }

  private boolean jj_3R_118()
 {
    if (jj_3R_149()) return true;
    return false;
  }

  private boolean jj_3R_117()
 {
    if (jj_3R_148()) return true;
    return false;
  }

  private boolean jj_3R_116()
 {
    if (jj_3R_83()) return true;
    return false;
  }

  private boolean jj_3R_87()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_116()) {
    jj_scanpos = xsp;
    if (jj_3R_117()) {
    jj_scanpos = xsp;
    if (jj_3R_118()) {
    jj_scanpos = xsp;
    if (jj_3R_119()) return true;
    }
    }
    }
    return false;
  }

  private boolean jj_3R_144()
 {
    if (jj_scan_token(MM_ERROR_IF_ENTITY_ABSENT)) return true;
    return false;
  }

  private boolean jj_3R_89()
 {
    if (jj_scan_token(IRI_REF)) return true;
    return false;
  }

  private boolean jj_3R_143()
 {
    if (jj_scan_token(MM_WARNING_IF_ENTITY_ABSENT)) return true;
    return false;
  }

  private boolean jj_3R_142()
 {
    if (jj_scan_token(MM_IGNORE_IF_ENTITY_ABSENT)) return true;
    return false;
  }

  private boolean jj_3R_141()
 {
    if (jj_scan_token(MM_CREATE_IF_ENTITY_ABSENT)) return true;
    return false;
  }

  private boolean jj_3R_97()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_141()) {
    jj_scanpos = xsp;
    if (jj_3R_142()) {
    jj_scanpos = xsp;
    if (jj_3R_143()) {
    jj_scanpos = xsp;
    if (jj_3R_144()) return true;
    }
    }
    }
    return false;
  }

  private boolean jj_3R_38()
 {
    if (jj_scan_token(NAME)) return true;
    return false;
  }

  private boolean jj_3R_36()
 {
    if (jj_3R_53()) return true;
    return false;
  }

  private boolean jj_3R_140()
 {
    if (jj_scan_token(MM_ERROR_IF_CELL_EMPTY)) return true;
    return false;
  }

  private boolean jj_3R_139()
 {
    if (jj_scan_token(MM_WARNING_IF_CELL_EMPTY)) return true;
    return false;
  }

  private boolean jj_3R_138()
 {
    if (jj_scan_token(MM_IGNORE_IF_CELL_EMPTY)) return true;
    return false;
  }

  private boolean jj_3R_137()
 {
    if (jj_scan_token(MM_CREATE_IF_CELL_EMPTY)) return true;
    return false;
  }

  private boolean jj_3R_37()
 {
    if (jj_scan_token(NAME)) return true;
    if (jj_scan_token(126)) return true;
    if (jj_scan_token(NAME)) return true;
    return false;
  }

  private boolean jj_3R_96()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_137()) {
    jj_scanpos = xsp;
    if (jj_3R_138()) {
    jj_scanpos = xsp;
    if (jj_3R_139()) {
    jj_scanpos = xsp;
    if (jj_3R_140()) return true;
    }
    }
    }
    return false;
  }

  private boolean jj_3R_136()
 {
    if (jj_scan_token(MM_NO_SHIFT)) return true;
    return false;
  }

  private boolean jj_3_23()
 {
    if (jj_3R_38()) return true;
    return false;
  }

  private boolean jj_3R_135()
 {
    if (jj_scan_token(MM_SHIFT_RIGHT)) return true;
    return false;
  }

  private boolean jj_3R_134()
 {
    if (jj_scan_token(MM_SHIFT_LEFT)) return true;
    return false;
  }

  private boolean jj_3_22()
 {
    if (jj_3R_37()) return true;
    return false;
  }

  private boolean jj_3R_133()
 {
    if (jj_scan_token(MM_SHIFT_DOWN)) return true;
    return false;
  }

  private boolean jj_3R_88()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_22()) {
    jj_scanpos = xsp;
    if (jj_3_23()) return true;
    }
    return false;
  }

  private boolean jj_3R_35()
 {
    if (jj_3R_52()) return true;
    return false;
  }

  private boolean jj_3R_132()
 {
    if (jj_scan_token(MM_SHIFT_UP)) return true;
    return false;
  }

  private boolean jj_3R_95()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_132()) {
    jj_scanpos = xsp;
    if (jj_3R_133()) {
    jj_scanpos = xsp;
    if (jj_3R_134()) {
    jj_scanpos = xsp;
    if (jj_3R_135()) {
    jj_scanpos = xsp;
    if (jj_3R_136()) return true;
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3_21()
 {
    if (jj_scan_token(122)) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_35()) { jj_scanpos = xsp; break; }
    }
    xsp = jj_scanpos;
    if (jj_3R_36()) jj_scanpos = xsp;
    if (jj_scan_token(123)) return true;
    return false;
  }

  private boolean jj_3R_47()
 {
    if (jj_3R_65()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_21()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_70()
 {
    if (jj_3R_89()) return true;
    return false;
  }

  private boolean jj_3R_69()
 {
    if (jj_3R_88()) return true;
    return false;
  }

  private boolean jj_3R_68()
 {
    if (jj_3R_47()) return true;
    return false;
  }

  private boolean jj_3R_51()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_68()) {
    jj_scanpos = xsp;
    if (jj_3R_69()) {
    jj_scanpos = xsp;
    if (jj_3R_70()) return true;
    }
    }
    return false;
  }

  private boolean jj_3R_67()
 {
    if (jj_3R_87()) return true;
    return false;
  }

  private boolean jj_3R_126()
 {
    if (jj_scan_token(OWL_LITERAL)) return true;
    return false;
  }

  private boolean jj_3R_125()
 {
    if (jj_scan_token(OWL_IRI)) return true;
    return false;
  }

  private boolean jj_3R_124()
 {
    if (jj_scan_token(OWL_ANNOTATION_PROPERTY)) return true;
    return false;
  }

  private boolean jj_3R_66()
 {
    if (jj_3R_47()) return true;
    return false;
  }

  private boolean jj_3R_123()
 {
    if (jj_scan_token(OWL_DATA_PROPERTY)) return true;
    return false;
  }

  private boolean jj_3R_122()
 {
    if (jj_scan_token(OWL_OBJECT_PROPERTY)) return true;
    return false;
  }

  private boolean jj_3R_50()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_66()) {
    jj_scanpos = xsp;
    if (jj_3R_67()) return true;
    }
    return false;
  }

  private boolean jj_3R_121()
 {
    if (jj_scan_token(OWL_NAMED_INDIVIDUAL)) return true;
    return false;
  }

  private boolean jj_3R_112()
 {
    if (jj_3R_87()) return true;
    return false;
  }

  private boolean jj_3R_111()
 {
    if (jj_3R_89()) return true;
    return false;
  }

  private boolean jj_3R_120()
 {
    if (jj_scan_token(OWL_CLASS)) return true;
    return false;
  }

  private boolean jj_3R_93()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_120()) {
    jj_scanpos = xsp;
    if (jj_3R_121()) {
    jj_scanpos = xsp;
    if (jj_3R_122()) {
    jj_scanpos = xsp;
    if (jj_3R_123()) {
    jj_scanpos = xsp;
    if (jj_3R_124()) {
    jj_scanpos = xsp;
    if (jj_3R_125()) {
    jj_scanpos = xsp;
    if (jj_3R_126()) return true;
    }
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_110()
 {
    if (jj_3R_88()) return true;
    return false;
  }

  private boolean jj_3R_82()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_110()) {
    jj_scanpos = xsp;
    if (jj_3R_111()) {
    jj_scanpos = xsp;
    if (jj_3R_112()) return true;
    }
    }
    return false;
  }

  private boolean jj_3R_163()
 {
    if (jj_3R_47()) return true;
    return false;
  }

  private boolean jj_3R_131()
 {
    if (jj_scan_token(MM_HASH_ENCODE)) return true;
    return false;
  }

  private boolean jj_3R_130()
 {
    if (jj_scan_token(MM_UUID_ENCODE)) return true;
    return false;
  }

  private boolean jj_3R_129()
 {
    if (jj_scan_token(MM_SNAKECASE_ENCODE)) return true;
    return false;
  }

  private boolean jj_3R_162()
 {
    if (jj_3R_82()) return true;
    return false;
  }

  private boolean jj_3R_128()
 {
    if (jj_scan_token(MM_CAMELCASE_ENCODE)) return true;
    return false;
  }

  private boolean jj_3R_159()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_162()) {
    jj_scanpos = xsp;
    if (jj_3R_163()) return true;
    }
    return false;
  }

  private boolean jj_3R_127()
 {
    if (jj_scan_token(MM_NO_ENCODE)) return true;
    return false;
  }

  private boolean jj_3R_94()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_127()) {
    jj_scanpos = xsp;
    if (jj_3R_128()) {
    jj_scanpos = xsp;
    if (jj_3R_129()) {
    jj_scanpos = xsp;
    if (jj_3R_130()) {
    jj_scanpos = xsp;
    if (jj_3R_131()) return true;
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_61()
 {
    if (jj_3R_47()) return true;
    return false;
  }

  private boolean jj_3R_60()
 {
    if (jj_3R_82()) return true;
    return false;
  }

  private boolean jj_3R_44()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_60()) {
    jj_scanpos = xsp;
    if (jj_3R_61()) return true;
    }
    return false;
  }

  private boolean jj_3R_156()
 {
    if (jj_scan_token(FALSE)) return true;
    return false;
  }

  private boolean jj_3R_57()
 {
    if (jj_3R_47()) return true;
    return false;
  }

  private boolean jj_3R_56()
 {
    if (jj_3R_82()) return true;
    return false;
  }

  private boolean jj_3R_41()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_56()) {
    jj_scanpos = xsp;
    if (jj_3R_57()) return true;
    }
    return false;
  }

  private boolean jj_3R_64()
 {
    if (jj_3R_47()) return true;
    return false;
  }

  private boolean jj_3R_63()
 {
    if (jj_3R_82()) return true;
    return false;
  }

  private boolean jj_3R_46()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_63()) {
    jj_scanpos = xsp;
    if (jj_3R_64()) return true;
    }
    return false;
  }

  private boolean jj_3R_43()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(33)) {
    jj_scanpos = xsp;
    if (jj_scan_token(34)) {
    jj_scanpos = xsp;
    if (jj_scan_token(35)) {
    jj_scanpos = xsp;
    if (jj_scan_token(36)) {
    jj_scanpos = xsp;
    if (jj_scan_token(37)) {
    jj_scanpos = xsp;
    if (jj_scan_token(38)) {
    jj_scanpos = xsp;
    if (jj_scan_token(39)) {
    jj_scanpos = xsp;
    if (jj_scan_token(40)) {
    jj_scanpos = xsp;
    if (jj_scan_token(41)) {
    jj_scanpos = xsp;
    if (jj_scan_token(43)) {
    jj_scanpos = xsp;
    if (jj_scan_token(42)) {
    jj_scanpos = xsp;
    if (jj_scan_token(45)) {
    jj_scanpos = xsp;
    if (jj_scan_token(44)) {
    jj_scanpos = xsp;
    if (jj_scan_token(47)) return true;
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_55()
 {
    if (jj_3R_44()) return true;
    if (jj_scan_token(SOME)) return true;
    if (jj_3R_62()) return true;
    return false;
  }

  private boolean jj_3R_155()
 {
    if (jj_scan_token(TRUE)) return true;
    return false;
  }

  private boolean jj_3R_153()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_155()) {
    jj_scanpos = xsp;
    if (jj_3R_156()) return true;
    }
    return false;
  }

  private boolean jj_3R_34()
 {
    if (jj_3R_41()) return true;
    if (jj_scan_token(SOME)) return true;
    if (jj_3R_43()) return true;
    return false;
  }

  private boolean jj_3R_40()
 {
    if (jj_3R_55()) return true;
    return false;
  }

  private boolean jj_3_20()
 {
    if (jj_3R_34()) return true;
    return false;
  }

  private boolean jj_3R_21()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_20()) {
    jj_scanpos = xsp;
    if (jj_3R_40()) return true;
    }
    return false;
  }

  private boolean jj_3R_152()
 {
    if (jj_scan_token(STRING_LITERAL)) return true;
    return false;
  }

  private boolean jj_3R_54()
 {
    if (jj_3R_44()) return true;
    if (jj_scan_token(ONLY)) return true;
    if (jj_3R_62()) return true;
    return false;
  }

  /** Generated Token Manager. */
  public MappingMasterParserTokenManager token_source;
  SimpleCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private Token jj_scanpos, jj_lastpos;
  private int jj_la;
  private int jj_gen;
  final private int[] jj_la1 = new int[57];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static private int[] jj_la1_2;
  static private int[] jj_la1_3;
  static private int[] jj_la1_4;
  static {
	   jj_la1_init_0();
	   jj_la1_init_1();
	   jj_la1_init_2();
	   jj_la1_init_3();
	   jj_la1_init_4();
	}
	private static void jj_la1_init_0() {
	   jj_la1_0 = new int[] {0x6000,0x0,0x6000,0x98000,0x98000,0x0,0x0,0x0,0x80000000,0x3e0000,0x3e0000,0x0,0x0,0x80000000,0x0,0x0,0x80000000,0x80000000,0xc0000000,0x20000000,0x10000000,0x0,0x80000000,0x80000000,0x80000000,0x0,0x80000000,0x80000000,0x80000000,0x80000000,0x80000000,0x80000000,0x80000000,0x80000000,0x80000000,0x0,0x0,0x0,0x80000000,0x0,0x0,0x0,0x0,0x0,0x80000000,0x0,0x0,0x80000000,0x80000000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,};
	}
	private static void jj_la1_init_1() {
	   jj_la1_1 = new int[] {0x1f40000,0x1f40000,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x1,0x1,0x1,0x0,0x0,0x0,0x1,0x1,0x1,0x0,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x0,0x8602bffe,0x0,0x1,0x8602bffe,0x60000000,0x0,0x0,0x0,0x1,0x0,0x0,0x1,0x1,0xbffe,0x0,0x80000000,0x0,0x0,0x0,0x0,0x0,};
	}
	private static void jj_la1_init_2() {
	   jj_la1_2 = new int[] {0xf800000,0xf800000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xf07c003f,0x3ffc0,0x0,0xf07c003f,0x0,0x0,0x3ffc0,0x0,0x0,0x3ffc0,0x0,0x0,0x0,0x0,0x7c0000,0x3f,0xe,0xf0000000,0x0,0x0,0x0,};
	}
	private static void jj_la1_init_3() {
	   jj_la1_3 = new int[] {0x0,0x0,0x0,0x0,0x0,0x2000000,0x2000000,0x2000000,0x8002e000,0x0,0x0,0x2000000,0x2000000,0x8002e000,0x2000000,0x2000000,0x9482e000,0x8082e000,0x9482e000,0x0,0x0,0x2000000,0x9482e000,0x9482e000,0x9482e000,0x80008000,0x8082e000,0x8082e000,0x8082e000,0x8082e000,0x8082e000,0x8082e000,0x8082e000,0x82e000,0x8002c000,0x80802000,0x1ff,0x0,0x2c000,0x1ff,0x4000,0x1000000,0x0,0x4000000,0x8002c000,0x0,0x2000000,0x8002c000,0x0,0x0,0x0,0x0,0x0,0x1,0x1e,0x1e0,0x1e00,};
	}
	private static void jj_la1_init_4() {
	   jj_la1_4 = new int[] {0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x2,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x2,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,};
	}
  final private JJCalls[] jj_2_rtns = new JJCalls[23];
  private boolean jj_rescan = false;
  private int jj_gc = 0;

  /** Constructor with InputStream. */
  public MappingMasterParser(java.io.InputStream stream) {
	  this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public MappingMasterParser(java.io.InputStream stream, String encoding) {
	 try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
	 token_source = new MappingMasterParserTokenManager(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 57; i++) jj_la1[i] = -1;
	 for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
	  ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
	 try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
	 token_source.ReInit(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jjtree.reset();
	 jj_gen = 0;
	 for (int i = 0; i < 57; i++) jj_la1[i] = -1;
	 for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor. */
  public MappingMasterParser(java.io.Reader stream) {
	 jj_input_stream = new SimpleCharStream(stream, 1, 1);
	 token_source = new MappingMasterParserTokenManager(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 57; i++) jj_la1[i] = -1;
	 for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
	if (jj_input_stream == null) {
	   jj_input_stream = new SimpleCharStream(stream, 1, 1);
	} else {
	   jj_input_stream.ReInit(stream, 1, 1);
	}
	if (token_source == null) {
 token_source = new MappingMasterParserTokenManager(jj_input_stream);
	}

	 token_source.ReInit(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jjtree.reset();
	 jj_gen = 0;
	 for (int i = 0; i < 57; i++) jj_la1[i] = -1;
	 for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor with generated Token Manager. */
  public MappingMasterParser(MappingMasterParserTokenManager tm) {
	 token_source = tm;
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 57; i++) jj_la1[i] = -1;
	 for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(MappingMasterParserTokenManager tm) {
	 token_source = tm;
	 token = new Token();
	 jj_ntk = -1;
	 jjtree.reset();
	 jj_gen = 0;
	 for (int i = 0; i < 57; i++) jj_la1[i] = -1;
	 for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  private Token jj_consume_token(int kind) throws ParseException {
	 Token oldToken;
	 if ((oldToken = token).next != null) token = token.next;
	 else token = token.next = token_source.getNextToken();
	 jj_ntk = -1;
	 if (token.kind == kind) {
	   jj_gen++;
	   if (++jj_gc > 100) {
		 jj_gc = 0;
		 for (int i = 0; i < jj_2_rtns.length; i++) {
		   JJCalls c = jj_2_rtns[i];
		   while (c != null) {
			 if (c.gen < jj_gen) c.first = null;
			 c = c.next;
		   }
		 }
	   }
	   return token;
	 }
	 token = oldToken;
	 jj_kind = kind;
	 throw generateParseException();
  }

  @SuppressWarnings("serial")
  static private final class LookaheadSuccess extends java.lang.Error { }
  final private LookaheadSuccess jj_ls = new LookaheadSuccess();
  private boolean jj_scan_token(int kind) {
	 if (jj_scanpos == jj_lastpos) {
	   jj_la--;
	   if (jj_scanpos.next == null) {
		 jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
	   } else {
		 jj_lastpos = jj_scanpos = jj_scanpos.next;
	   }
	 } else {
	   jj_scanpos = jj_scanpos.next;
	 }
	 if (jj_rescan) {
	   int i = 0; Token tok = token;
	   while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
	   if (tok != null) jj_add_error_token(kind, i);
	 }
	 if (jj_scanpos.kind != kind) return true;
	 if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
	 return false;
  }


/** Get the next Token. */
  final public Token getNextToken() {
	 if (token.next != null) token = token.next;
	 else token = token.next = token_source.getNextToken();
	 jj_ntk = -1;
	 jj_gen++;
	 return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
	 Token t = token;
	 for (int i = 0; i < index; i++) {
	   if (t.next != null) t = t.next;
	   else t = t.next = token_source.getNextToken();
	 }
	 return t;
  }

  private int jj_ntk_f() {
	 if ((jj_nt=token.next) == null)
	   return (jj_ntk = (token.next=token_source.getNextToken()).kind);
	 else
	   return (jj_ntk = jj_nt.kind);
  }

  private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  private int[] jj_expentry;
  private int jj_kind = -1;
  private int[] jj_lasttokens = new int[100];
  private int jj_endpos;

  private void jj_add_error_token(int kind, int pos) {
	 if (pos >= 100) {
		return;
	 }

	 if (pos == jj_endpos + 1) {
	   jj_lasttokens[jj_endpos++] = kind;
	 } else if (jj_endpos != 0) {
	   jj_expentry = new int[jj_endpos];

	   for (int i = 0; i < jj_endpos; i++) {
		 jj_expentry[i] = jj_lasttokens[i];
	   }

	   for (int[] oldentry : jj_expentries) {
		 if (oldentry.length == jj_expentry.length) {
		   boolean isMatched = true;

		   for (int i = 0; i < jj_expentry.length; i++) {
			 if (oldentry[i] != jj_expentry[i]) {
			   isMatched = false;
			   break;
			 }

		   }
		   if (isMatched) {
			 jj_expentries.add(jj_expentry);
			 break;
		   }
		 }
	   }

	   if (pos != 0) {
		 jj_lasttokens[(jj_endpos = pos) - 1] = kind;
	   }
	 }
  }

  /** Generate ParseException. */
  public ParseException generateParseException() {
	 jj_expentries.clear();
	 boolean[] la1tokens = new boolean[131];
	 if (jj_kind >= 0) {
	   la1tokens[jj_kind] = true;
	   jj_kind = -1;
	 }
	 for (int i = 0; i < 57; i++) {
	   if (jj_la1[i] == jj_gen) {
		 for (int j = 0; j < 32; j++) {
		   if ((jj_la1_0[i] & (1<<j)) != 0) {
			 la1tokens[j] = true;
		   }
		   if ((jj_la1_1[i] & (1<<j)) != 0) {
			 la1tokens[32+j] = true;
		   }
		   if ((jj_la1_2[i] & (1<<j)) != 0) {
			 la1tokens[64+j] = true;
		   }
		   if ((jj_la1_3[i] & (1<<j)) != 0) {
			 la1tokens[96+j] = true;
		   }
		   if ((jj_la1_4[i] & (1<<j)) != 0) {
			 la1tokens[128+j] = true;
		   }
		 }
	   }
	 }
	 for (int i = 0; i < 131; i++) {
	   if (la1tokens[i]) {
		 jj_expentry = new int[1];
		 jj_expentry[0] = i;
		 jj_expentries.add(jj_expentry);
	   }
	 }
	 jj_endpos = 0;
	 jj_rescan_token();
	 jj_add_error_token(0, 0);
	 int[][] exptokseq = new int[jj_expentries.size()][];
	 for (int i = 0; i < jj_expentries.size(); i++) {
	   exptokseq[i] = jj_expentries.get(i);
	 }
	 return new ParseException(token, exptokseq, tokenImage);
  }

  private int trace_indent = 0;
  private boolean trace_enabled;

/** Trace enabled. */
  final public boolean trace_enabled() {
	 return trace_enabled;
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

  private void jj_rescan_token() {
	 jj_rescan = true;
	 for (int i = 0; i < 23; i++) {
	   try {
		 JJCalls p = jj_2_rtns[i];

		 do {
		   if (p.gen > jj_gen) {
			 jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
			 switch (i) {
			   case 0: jj_3_1(); break;
			   case 1: jj_3_2(); break;
			   case 2: jj_3_3(); break;
			   case 3: jj_3_4(); break;
			   case 4: jj_3_5(); break;
			   case 5: jj_3_6(); break;
			   case 6: jj_3_7(); break;
			   case 7: jj_3_8(); break;
			   case 8: jj_3_9(); break;
			   case 9: jj_3_10(); break;
			   case 10: jj_3_11(); break;
			   case 11: jj_3_12(); break;
			   case 12: jj_3_13(); break;
			   case 13: jj_3_14(); break;
			   case 14: jj_3_15(); break;
			   case 15: jj_3_16(); break;
			   case 16: jj_3_17(); break;
			   case 17: jj_3_18(); break;
			   case 18: jj_3_19(); break;
			   case 19: jj_3_20(); break;
			   case 20: jj_3_21(); break;
			   case 21: jj_3_22(); break;
			   case 22: jj_3_23(); break;
			 }
		   }
		   p = p.next;
		 } while (p != null);

		 } catch(LookaheadSuccess ls) { }
	 }
	 jj_rescan = false;
  }

  private void jj_save(int index, int xla) {
	 JJCalls p = jj_2_rtns[index];
	 while (p.gen > jj_gen) {
	   if (p.next == null) { p = p.next = new JJCalls(); break; }
	   p = p.next;
	 }

	 p.gen = jj_gen + xla - jj_la; 
	 p.first = token;
	 p.arg = xla;
  }

  static final class JJCalls {
	 int gen;
	 Token first;
	 int arg;
	 JJCalls next;
  }

}
